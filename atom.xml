<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Maintel&#39;s notes</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://maintel.github.io/"/>
  <updated>2018-03-13T15:13:49.960Z</updated>
  <id>https://maintel.github.io/</id>
  
  <author>
    <name>Maintel</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>原生监控WebView加载Html的过程</title>
    <link href="https://maintel.github.io//blog/2017/09/%E5%8E%9F%E7%94%9F%E7%9B%91%E6%8E%A7WebView%E5%8A%A0%E8%BD%BDHtml%E7%9A%84%E8%BF%87%E7%A8%8B-md.html"/>
    <id>https://maintel.github.io//blog/2017/09/原生监控WebView加载Html的过程-md.html</id>
    <published>2017-09-13T15:04:11.000Z</published>
    <updated>2018-03-13T15:13:49.960Z</updated>
    
    <content type="html"><![CDATA[<h1 id="监控加载过程"><a href="#监控加载过程" class="headerlink" title="监控加载过程"></a>监控加载过程</h1><blockquote>
<p>获取 webView 加载过程中的各个阶段的耗时情况</p>
</blockquote>
<p>由于页面打开的过程中白屏情况严重，要解决问题，首先要分析问题出在哪。</p>
<h2 id="从源生层面分析"><a href="#从源生层面分析" class="headerlink" title="从源生层面分析"></a>从源生层面分析</h2><p>分别在加载 webView 的 activity 的 onCreate 、onResume 方法中记录时间</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">LogUtils.e(<span class="string">"onResume::"</span> + System.currentTimeMillis());</div></pre></td></tr></table></figure>
<p>对 webView 设置自定义 WebViewClient,并记录 html 的加载时间</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">webView.setWebViewClient(<span class="keyword">new</span> MyWebViewClient());</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">MyWebViewClient</span> <span class="keyword">extends</span> <span class="title">WebViewClient</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPageFinished</span><span class="params">(WebView view, String url)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onPageFinished(view, url);</div><div class="line">        LogUtils.e(<span class="string">"onPageFinished::"</span> + System.currentTimeMillis());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPageStarted</span><span class="params">(WebView webView, String s, Bitmap bitmap)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onPageStarted(webView, s, bitmap);</div><div class="line">        LogUtils.e(<span class="string">"onPageStarted::"</span> + System.currentTimeMillis());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>原生监控结果</strong></p>
<blockquote>
<p>E/tag: onCreate::1519980761086</p>
<p>E/tag: onResume::1519980761202</p>
<p>E/tag: onPageStarted::1519980761246</p>
<p>E/tag: onPageFinished::1519980762874</p>
<p>…</p>
</blockquote>
<p>可以看到主要耗时是在 Html 的加载过程中。</p>
<h2 id="从-H5-端进行监控"><a href="#从-H5-端进行监控" class="headerlink" title="从 H5 端进行监控"></a>从 H5 端进行监控</h2><p>这里主要是通过 performance.timing 来分析 H5 加载过程中各个节点的耗时情况</p>
<p>有两个方法</p>
<h3 id="通过源生代码"><a href="#通过源生代码" class="headerlink" title="通过源生代码"></a>通过源生代码</h3><p>增加以下代码</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">webView.setWebChromeClient(<span class="keyword">new</span> WebChromeClient());</div></pre></td></tr></table></figure>
<p>然后在 WebViewClient.onPageFinished 结束后，延迟几秒钟执行 </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">webview.loadUrl(<span class="string">"javascript:alert(JSON.stringify(window.performance.timing))"</span>);</div></pre></td></tr></table></figure>
<p>这样就可以看到各个节点的耗时，但是这样不便于记录和观察，可以通过一个写一个 js 方法来把数据获取过来进行输出。</p>
<p>不过一般采用第二种方法比较方便。</p>
<h3 id="通过-chrome-浏览器的调试功能"><a href="#通过-chrome-浏览器的调试功能" class="headerlink" title="通过 chrome 浏览器的调试功能"></a>通过 chrome 浏览器的调试功能</h3><p><strong>注意：</strong> Android 的版本要在 4.0 以上</p>
<p>在 chrome 中输入 chrome://inspect 如下：</p>
<p><img src="http://blogqn.maintel.cn/QQ20180302-170347@2x.png?e=3096781460&amp;token=cs2nCfx72Y7hW0_NpFYzb3Jab90IJWraRtphMd-q:hdfqLl0D8y77urO_I44XYU1E2mg=" alt="chromeinspect"></p>
<p>然后点击 inspect，在控制台输入window.performance</p>
<p><img src="http://blogqn.maintel.cn/QQ20180302-170814@2x.png?e=3096781717&amp;token=cs2nCfx72Y7hW0_NpFYzb3Jab90IJWraRtphMd-q:MyWvKHEazHhT6u3GzIT95kaLViI=" alt="performance"></p>
<hr>
<p>各参数的解读可以参考<a href="./window-performance分析Html加载过程.html">这里</a></p>
<p>然后就可以通过上面拿到的内容分析出具体是哪里太过耗时然后针对性的进行优化。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;监控加载过程&quot;&gt;&lt;a href=&quot;#监控加载过程&quot; class=&quot;headerlink&quot; title=&quot;监控加载过程&quot;&gt;&lt;/a&gt;监控加载过程&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;获取 webView 加载过程中的各个阶段的耗时情况&lt;/p&gt;
&lt;/blockquo
    
    </summary>
    
      <category term="android技术" scheme="https://maintel.github.io/categories/android%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="webView" scheme="https://maintel.github.io/tags/webView/"/>
    
  </entry>
  
  <entry>
    <title>window.performance分析Html加载过程</title>
    <link href="https://maintel.github.io//blog/2017/09/window-performance%E5%88%86%E6%9E%90Html%E5%8A%A0%E8%BD%BD%E8%BF%87%E7%A8%8B.html"/>
    <id>https://maintel.github.io//blog/2017/09/window-performance分析Html加载过程.html</id>
    <published>2017-09-13T14:58:28.000Z</published>
    <updated>2018-03-13T15:13:48.147Z</updated>
    
    <content type="html"><![CDATA[<h1 id="window-performance-分析-Html-加载过程"><a href="#window-performance-分析-Html-加载过程" class="headerlink" title="window.performance 分析 Html 加载过程"></a>window.performance 分析 Html 加载过程</h1><p>window.performance是HTML5 的一个新API。<a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/performance" target="_blank" rel="external">详细文档</a></p>
<h2 id="浏览器一般加载顺序"><a href="#浏览器一般加载顺序" class="headerlink" title="浏览器一般加载顺序"></a>浏览器一般加载顺序</h2><p>如下图：</p>
<p><img src="http://blogqn.maintel.cn/011624558421157.png?e=3096780128&amp;token=cs2nCfx72Y7hW0_NpFYzb3Jab90IJWraRtphMd-q:3ErJgje_bBt1umNYY6w5UUKVSgM=" alt="浏览器加载顺序"></p>
<h2 id="字段含义"><a href="#字段含义" class="headerlink" title="字段含义"></a>字段含义</h2><ul>
<li><p>navigationStart</p>
<p>当访问一个新页面时，当前页面卸载完成所返回的时间点，如果没有当前页面，则返回 fetchStart 时间点。</p>
</li>
<li><p>redirectStart</p>
<p>如果是HTTP重定向，如果跳转都是同源的，则返回开始获取发起重定向的时间点，否则返回0</p>
</li>
<li><p>redirectEnd</p>
<p>如果是同源重定向，返回重定向请求接收完最后一字节的时间点，否则返回0</p>
</li>
<li><p>fetchStart</p>
<p>如果请求是用http get发起的，返回浏览器查缓存之前的时间点，否则返回发起获取资源的时间点</p>
</li>
<li><p>domainLookupStart</p>
<p>返回浏览器发起DNS查询的时间点，如果是长连接或者请求文件来自缓存等本地存储则返回fetchStart时间点</p>
</li>
<li><p>domainLookupEnd</p>
<p>返回结束DNS查询的时间点，如果是长连接或者请求文件来自缓存等本地存储则返回fetchStart时间点</p>
</li>
<li><p>connectStart</p>
<p>返回浏览器向服务器发起建立获取当前文档的连接请求的时间点，如果是长连接或者请求文件来自缓存等本地存储则返回domainLookupEnd时间点</p>
</li>
<li><p>connectEnd</p>
<p>返回与服务器建立完成连接的时间点，如果是长连接或者请求文件来自缓存等本地存储则返回domainLookupEnd时间点</p>
</li>
<li><p>requestStart</p>
<p>返回浏览器发起请求的时间，不管是向server还是本地缓存或存储</p>
</li>
<li><p>responseStart</p>
<p>返回浏览器拿到第一个响应字节的时间点，包括从服务器、缓存或者其他本地存储</p>
</li>
<li><p>responseEnd</p>
<p>返回浏览器拿到最后一个响应字节或者传输连接关闭的时间点，包括从服务器、缓存或者其他本地存储</p>
</li>
<li><p>unloadEventStart</p>
<p>为 unload 事件被触发之时的 Unix毫秒时间戳。如果没有上一个文档，或者上一个文档或需要重定向的页面之一不同源，则该值返回 0。</p>
</li>
<li><p>unloadEventEnd</p>
<p>如果要打开的页面和当前的页面同源，则返回用户unload事件执行完成后的时间点，如果当前文档不存在或者不同源，则返回0</p>
</li>
<li><p>domLoading</p>
<p>返回浏览器将当前文档状态设置成loading的时间点</p>
</li>
<li><p>domInteractive</p>
<p>返回浏览器将当前文档状态设置成interactive的时间点</p>
</li>
<li><p>domContentLoadedEventStart</p>
<p>返回浏览器触发DOMContentLoaded事件执行之前的时间点</p>
</li>
<li><p>domContentLoadedEventEnd</p>
<p>返回浏览器触发DOMContentLoaded事件执行完成的时间点</p>
</li>
<li><p>domComplete</p>
<p>返回浏览器将当前文档状态设置成complete的时间点</p>
</li>
<li><p>loadEventStart</p>
<p>返回浏览器触发load事件执行之前的时间点，否则为0</p>
</li>
<li><p>loadEventEnd</p>
<p>返回浏览器触发load事件执行完成的时间点</p>
</li>
</ul>
<p>然后就可以根据各个节点的时间来计算出各个阶段的耗时，比如渲染阶段为 domComplete - domLoading</p>
<hr>
<p>参考资料</p>
<p><a href="http://www.cnblogs.com/joyho/articles/4384306.html" target="_blank" rel="external">使用window.performance对应用性能监测</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;window-performance-分析-Html-加载过程&quot;&gt;&lt;a href=&quot;#window-performance-分析-Html-加载过程&quot; class=&quot;headerlink&quot; title=&quot;window.performance 分析 Html 加载过
    
    </summary>
    
      <category term="前端" scheme="https://maintel.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="html优化" scheme="https://maintel.github.io/tags/html%E4%BC%98%E5%8C%96/"/>
    
      <category term="html加载" scheme="https://maintel.github.io/tags/html%E5%8A%A0%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>[Spring] 装配 bean</title>
    <link href="https://maintel.github.io//blog/2017/05/spring2bean.html"/>
    <id>https://maintel.github.io//blog/2017/05/spring2bean.html</id>
    <published>2017-05-09T10:01:19.000Z</published>
    <updated>2018-03-13T14:46:37.034Z</updated>
    
    <content type="html"><![CDATA[<p>任何一个应用都是由多了为了实现业务目标而相互协作的对象构成，传统的方法中创建这些对象间的关联关系通常通过构造器或者查找，而这通常会导致高度耦合、结构复杂、难以复用以及难以进行单元测试。</p>
<p>在 Spring 中，对象无需自己查找或者创建与其关联的其他对象，容器负责把需要相互协作的对象引用赋予各个对象。创建对象之间的协作关系行为称为<strong>装配</strong>，这也是依赖注入（DI）的本质。</p>
<a id="more"></a>
<h1 id="Spring-装配-bean"><a href="#Spring-装配-bean" class="headerlink" title="Spring 装配 bean"></a>Spring 装配 bean</h1><p>Spring 提供了三种装配机制：</p>
<ul>
<li>在 XML 中进行显式配置；</li>
<li>在 Java 中进行显式配置；</li>
<li>隐式的 Bean 发现机制和自动装配。</li>
</ul>
<p>这三种方式可以互相搭配，而且没有说明某个场景下一定要选用哪种机制。</p>
<h2 id="自动化装配-Bean"><a href="#自动化装配-Bean" class="headerlink" title="自动化装配 Bean"></a>自动化装配 Bean</h2><p>自动化装配是最便利的配置方案。需要从两个角度来实现：</p>
<ul>
<li>组件自动扫描（component scanning）：Spring 会自动发现应用中上下文创建的 bean；</li>
<li>自动组装（autowiring）：Spring 自动满足 bean 间的依赖。</li>
</ul>
<p>（哦 就是 @component 和 @Autowired 嘛）</p>
<p>但是在使用的时候需要显式的配置 Spring，好让其去主动寻找带有 @component 注解的类，并创建 bean。有两种方式指定：</p>
<p>方式一：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="meta">@ComponentScan</span>  <span class="comment">//启用组件扫描。</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Config</span> </span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>@componentScan 默认会扫描当前包下及所有子包，自动查找带有 @component 注解的类。</p>
<p>方式二：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-pakage</span>=<span class="string">"packageName"</span>/&gt;</span></div></pre></td></tr></table></figure>
<p>component-scan 和 @ComponentScan 注解有相同的属性，有以下两个重要的属性：</p>
<ul>
<li><p>basePackage </p>
<p>  指定一个或者多个包名。</p>
</li>
<li><p>basePackageClasses</p>
<p>  指定扫描的类或者实现了某个接口的类。</p>
</li>
</ul>
<p><strong>@Autowired</strong> 注解可以实现自动装配，就是在 Spring 在创建一个 bean 的时候，会根据它来实现自动加入此 bean 所需要的依赖。</p>
<p>比如下面：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Engine</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">power</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"go go go!"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span>   <span class="comment">//通过注解自动注入</span></div><div class="line">    Engine engine;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">go</span><span class="params">()</span> </span>&#123;</div><div class="line">        engine.power();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Configuration</span>  <span class="comment">//表明这是一个配置类</span></div><div class="line"><span class="meta">@ComponentScan</span>  <span class="comment">//配置扫描</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Config</span> </span>&#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 在一个测试类中进行测试。</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        BeanFactory factory = <span class="keyword">new</span> AnnotationConfigApplicationContext(Config.class); <span class="comment">//解析配置类</span></div><div class="line">        Car car = factory.getBean(Car.class);</div><div class="line">        car.go();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 运行Test 类可以看到输出 go go go!</span></div></pre></td></tr></table></figure>
<p>@Autowired 注解可以有多种用法，可以用在构造函数中，或者一个方法上。同时可以使用 java 原生的 @Inject 注解来代替它，在大多数情况下是没有任何问题的。</p>
<p>大多数时候使用自动化配置来装配 bean，但是有时候这种方法行不通，比如引用一个第三方库的类时，没法给它添加注解，这个时候就需要用到下面两个方法。</p>
<h2 id="通过-Java-装配-bean"><a href="#通过-Java-装配-bean" class="headerlink" title="通过 Java 装配 bean"></a>通过 Java 装配 bean</h2><p>通过 Java 来装配 bean 很简单，主要是借助 JavaConfig 来实现注入。有两个注解</p>
<ul>
<li>Configuration 声明一个配置类</li>
<li>@Bean 创建一个 bean 实例</li>
</ul>
<p>改造上面的例子：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Engine 和 Car 不带有任何注解的普通 java 类</span></div><div class="line"><span class="comment">// 配置类</span></div><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Config</span> </span>&#123;</div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Engine <span class="title">getEngine</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Engine();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Car <span class="title">getCar</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Car(getEngine()); </div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Car <span class="title">getCar2</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Car(getEngine());</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">    <span class="comment">// 测试</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        BeanFactory beanFactory = <span class="keyword">new</span> AnnotationConfigApplicationContext(Config.class);</div><div class="line">        Car car = (Car) beanFactory.getBean(<span class="string">"getCar"</span>);  <span class="comment">// 获取方法就是根据方法名，除非显式的指定了 @Bean 的 name 属性</span></div><div class="line">        car.go();</div><div class="line">        System.out.println(car.getEngine());</div><div class="line">        Car car2 = (Car) beanFactory.getBean(<span class="string">"getCar2"</span>);</div><div class="line">        car2.go();</div><div class="line">        System.out.println(car2.getEngine());</div><div class="line">    &#125;</div><div class="line"><span class="comment">// 通过输出可以看到 car 和 car2 中的 engine 对象是同一个。</span></div></pre></td></tr></table></figure>
<p>上面方法中写了一个<code>new Car(getEngine())</code>,似乎每次执行都会new 一个新的 engine 实例，但事实并非如此，因为如果一个方法带有 @bean 注解，在默认情况下 Spring 会拦截所有对它的调用，并确保返回该方法创建的 bean，而不是每次都对其进行实际调用。另外需要说明的是，可以在带有 @Bean 注解的方法中做任何 Java 允许做的事情。</p>
<h2 id="使用-XML-来装配-bean"><a href="#使用-XML-来装配-bean" class="headerlink" title="使用 XML 来装配 bean"></a>使用 XML 来装配 bean</h2><p>通过 xml 来配置的方式在 Spring 历史中已经存在了很长时间，同时使用起来也比较复杂。具体使用可以用下面一图来表示。</p>
<p><img src="http://blogqn.maintel.cn/TIM截图20170901164502.png?e=3081054847&amp;token=kDSqSAyKGaf8JcHprWP7S4W3hGuz8kDIEhzAufWH:WfKEQPLL18PbQw2U39GNAuz1Yus=" alt=""></p>
<p>以上是装配 Bean 的三种方式，这三种方式并不是只能独立的使用，它们之间可以相互混用，从而达到最佳方案。</p>
<h1 id="高级装配"><a href="#高级装配" class="headerlink" title="高级装配"></a>高级装配</h1><p>上面讲了 Spring 装配 bean 基本方法，Spring 还提供了很多高级的用法。</p>
<h2 id="配置-profile-bean"><a href="#配置-profile-bean" class="headerlink" title="配置 profile bean"></a>配置 profile bean</h2><p>最常见的情况是，开发过程中连接数据库在不同阶段使用的链接不同，开发环境，测试环境，生产环境等等。通过 profile 的配置可以灵活的切换他们而不引起问题。例如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Config</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="meta">@Profile</span>(<span class="string">"dev"</span>) <span class="comment">//开发环境</span></div><div class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">devDataSource</span><span class="params">()</span></span>&#123;</div><div class="line">        ...</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="meta">@Profile</span>(<span class="string">"test"</span>) <span class="comment">//测试环境</span></div><div class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">testDataSource</span><span class="params">()</span></span>&#123;</div><div class="line">        ...</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//同样也可以通过 xml 来配置 &lt;bean profile="dev"&gt;...&lt;/bean&gt;</span></div></pre></td></tr></table></figure>
<p>然后就是如何激活 profile 了，当 profile 处于激活状态时才会创建这个 bean，如果没有都没有处于激活状态的话，则都不会创建。profile 的激活主要依赖于两个属性：</p>
<ul>
<li>spring.profiles.active</li>
<li>spring.profiles.default</li>
</ul>
<p>这两个属性相互独立，active 用来确定哪个 profile 会被激活，default 确定默认值。Spring 提供了多种方式来配置这两种属性：</p>
<ul>
<li>作为 DispatcherServlet 的初始化参数；</li>
<li>作为 Web 应用的上下文参数；</li>
<li>作为 JNDI 条目；</li>
<li>作为环境变量；</li>
<li>作为 JVM 的系统属性；</li>
<li>在集成测试类上，使用 @ActiveProlfiles 注解设置。</li>
</ul>
<h2 id="条件化-bean"><a href="#条件化-bean" class="headerlink" title="条件化 bean"></a>条件化 bean</h2><p>使用 @Conditional 注解可以约束只有当一个 bean 满足了特定的条件后才能被创建。注意：只有 Spring 4 以后才提供此注解。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="meta">@Conditional</span>(ConditionalTest.class)</div><div class="line">    <span class="function"><span class="keyword">public</span> Car <span class="title">getCar2</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Car(getEngine());</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConditionalTest</span> <span class="keyword">implements</span> <span class="title">Condition</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(ConditionContext conditionContext, AnnotatedTypeMetadata annotatedTypeMetadata)</span> </span>&#123;</div><div class="line">        <span class="comment">//something</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如上面所示，@Conditional 注解必须给定一个实现了 Condition 接口的类，这个接口的实现很简单，通过 matches 方法返回值来确定是否创建 bean，true 则创建，false 则不创建。matches 方法给定的两个参数能够帮我们做很多事情，例如检查 bean 的定义、检查 bean 是否存在、检查某个资源是否加载、检查类的加载情况、检查是否有其他约束等。</p>
<p>而且从 Spring 4开始 @Profile 也是通过 @Conditional 注解来实现的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;任何一个应用都是由多了为了实现业务目标而相互协作的对象构成，传统的方法中创建这些对象间的关联关系通常通过构造器或者查找，而这通常会导致高度耦合、结构复杂、难以复用以及难以进行单元测试。&lt;/p&gt;
&lt;p&gt;在 Spring 中，对象无需自己查找或者创建与其关联的其他对象，容器负责把需要相互协作的对象引用赋予各个对象。创建对象之间的协作关系行为称为&lt;strong&gt;装配&lt;/strong&gt;，这也是依赖注入（DI）的本质。&lt;/p&gt;
    
    </summary>
    
      <category term="Spring" scheme="https://maintel.github.io/categories/Spring/"/>
    
    
      <category term="spring" scheme="https://maintel.github.io/tags/spring/"/>
    
      <category term="spring boot" scheme="https://maintel.github.io/tags/spring-boot/"/>
    
      <category term="java后台" scheme="https://maintel.github.io/tags/java%E5%90%8E%E5%8F%B0/"/>
    
  </entry>
  
  <entry>
    <title>[Spring] 概述</title>
    <link href="https://maintel.github.io//blog/2017/05/spring1%E6%A6%82%E8%BF%B0.html"/>
    <id>https://maintel.github.io//blog/2017/05/spring1概述.html</id>
    <published>2017-05-07T09:54:23.000Z</published>
    <updated>2018-03-13T14:46:37.033Z</updated>
    
    <content type="html"><![CDATA[<p>不知不觉已经捣鼓了小半年的 Java 了，主要一直在使用 Spring boot 来开发，但是由于 Spring boot 使用起来太过简单了，虽然做了这么久但是对 Spring 框架、工作原理等还是一头雾水，很多东西不理解也不知道，所以决定从头开始看 Spring，从最基础最简单的 Spring 开始学习。本篇先来从概念的层面了解一下 Spring。</p>
<a id="more"></a>
<h1 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h1><p>Spring Framework 是一个提供完善的基础设施用来支持来开发 Java 应用程序的 Java 平台。Spring 负责基础设施功能，使程序员可以专注于应用的开发。</p>
<p>简单的来说 Spring 是一个轻量级的 Java 开发框架。通过启用基于 POJO 编程模型来促进良好的编程实践。</p>
<p>Spring 为了减轻 Java 开发的复杂性，采用一下四种核心策略：</p>
<ul>
<li>基于 POJO 的轻量级和最小侵入式编程；</li>
<li>通过依赖注入和面向接口编程实现松耦合；</li>
<li>基于切面和惯例进行声明式编程；</li>
<li>通过切面和模板减少样板式代码。</li>
</ul>
<p>使用 Spring 的好处：</p>
<ul>
<li>使 Java 方法可以执行数据库事务而不用去处理事务 API。</li>
<li>使本地 Java 方法可以执行远程过程而不用去处理远程 API。</li>
<li>使本地 Java 方法可以拥有管理操作而不用去处理 JMX API。</li>
<li>使本地 Java 方法可以执行消息处理而不用去处理 JMS API。</li>
</ul>
<h1 id="Spring-核心功能"><a href="#Spring-核心功能" class="headerlink" title="Spring 核心功能"></a>Spring 核心功能</h1><p>Spring 的核心功能有两个</p>
<ul>
<li>Spring容器作为超级大工厂，负责创建、管理所有的Java对象，这些Java对象被称为Bean。</li>
<li>Spring容器管理容器中Bean之间的依赖关系，Spring使用一种被称为”依赖注入”的方式来管理Bean之间的依赖关系。</li>
</ul>
<h1 id="Spring-核心特性"><a href="#Spring-核心特性" class="headerlink" title="Spring 核心特性"></a>Spring 核心特性</h1><ul>
<li>依赖注入（DI）</li>
<li>面向切面编程（AOP）</li>
</ul>
<h1 id="POJO"><a href="#POJO" class="headerlink" title="POJO"></a>POJO</h1><p>POJO 是 Plain Old Java Object 的简称，POJO 和 JavaBean、EJB 一样是 Java 编程规范中的一种规范，并不是指一个特定的对象或者什么。POJO 的最原始的出处是《POJOs in Action》里面：</p>
<blockquote>
<p>The term was coined while Rebecca Parsons, Josh MacKenzie and I were preparing for a talk at a conference in September 2000. In the talk we were pointing out the many benefits of encoding business logic into regular java objects rather than using Entity Beans. We wondered why people were so against using regular objects in their systems and concluded that it was because simple objects lacked a fancy name. So we gave them one, and it’s caught on very nicely.</p>
</blockquote>
<p>大概的意思就是要将业务逻辑编码为常规java对象而不是使用实体Bean，并给这个常规的 Java 对象起了一个名字——POJO。</p>
<p>一个 POJO 应该是一个正规的 Java 对象，不但当任何特殊角色，也不实现任何 Java 框架指定的接口。它可以包含一些业务处理或持久化逻辑等。</p>
<p>Spring 的强大之处就是非侵入式的使用 POJO 从而使 POJO 发挥更大的功能。这样的好处是显而易见的，非侵入就意味着这个类在任何场所都可以使用。Spring 使用 POJO 的方式之一就是通过依赖注入来装配他们。</p>
<h1 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h1><p>首先什么是依赖，在一个工程中，相互协作的类就叫做相互依赖。举个例子，类 A 中有一个成员变量 B，则可以说 A 依赖 B。传统的编程中，需要自己管理与依赖的对象，比如 New 一个，或者销毁等等，这样必然带来高度的耦合以及增加测试难度。依赖注入能很好的解决这些问题。</p>
<p><strong>依赖注入</strong>（Dependency Injection，简称DI）可以看做是一个负责协调各对象的第三方组件，对象的依赖关系由这个第三方组件在创建对象的时候设定，它会将锁的关系自动交给目标对象，对象无需自己创建或者管理它们的依赖关系。</p>
<p>依赖注入能够让相互协作的软件组件保持松耦合。</p>
<h1 id="面向切面编程"><a href="#面向切面编程" class="headerlink" title="面向切面编程"></a>面向切面编程</h1><p><strong>面向切面编程</strong>（Aspect-oriented Programming，简称AOP）允许把遍布在应用软件各处的功能分离出来形成可重用的组件。</p>
<p>切面可以理解为横贯整个应用程序过程的一些功能，比如打印日志，缓存数据等等。</p>
<p><img src="http://blogqn.maintel.cn/aop.png?e=3080964974&amp;token=kDSqSAyKGaf8JcHprWP7S4W3hGuz8kDIEhzAufWH:I97zo1TVnBw25JBrS-L2PwnvQOs=" alt=""></p>
<p>最常见的通用功能实现技术是继承和委托，但是整个应用都使用相同的基类会使耦合度太高而且系统很脆弱，而委托可能需要对委托的对象进行复杂的调用。而面向切面就是将横贯整个应用的一些功能模块化为特殊的类，这些类就被成为切面（aspect）。</p>
<p>而 Spring 提供了四种对 AOP 的支持：</p>
<ul>
<li>基于代理的经典 Spring AOP；</li>
<li>纯 POJO 切面；</li>
<li>@AspectJ 注解驱动的切面；</li>
<li>注入式 AspectJ 切面。</li>
</ul>
<p>Spring AOP 的构建是建立在动态代理基础上的。</p>
<p>个人理解： DI 是帮助 Spring 组件间即应用对象间的解耦，而 AOP 则更注重的是功能间的解耦，即业务逻辑与横贯应用的通用功能间的解耦。</p>
<h1 id="Spring-模块"><a href="#Spring-模块" class="headerlink" title="Spring 模块"></a>Spring 模块</h1><p>Spring 框架包含20个不同的模块，在开发中可以根据不同需求选择不同的模块。</p>
<p><img src="http://blogqn.maintel.cn/Spring模块.png?e=3080971139&amp;token=kDSqSAyKGaf8JcHprWP7S4W3hGuz8kDIEhzAufWH:NHcqZb_6-Z-n5Qq9lflPdBMiJUk=" alt=""></p>
<ul>
<li><p>Spring 核心容器</p>
<p>  容器是 Spring 框架最核心的部分，它管理着 Spring 应用中 bean 的创建、配置和管理。还包括了 Spring bean 工厂、Spring 应用上下文、一些企业服务等。</p>
</li>
<li><p>面向切面编程</p>
<p>  在 AOP 模块中，Spring 对面向切面编程提供的支持就是基于该模块的。</p>
</li>
<li><p>数据访问与集成</p>
<p>  该模块提供了抽象了 JDBC 和 DAO 等的样板代码，使数据库连接服务变得简单，而且不用不关心数据库的关闭等操作。ORM 模块是对较为流行的 ORM 框架的集成， Hibernate、Java Data Object等。还包括消息服务，以及基于 AOP 模块的事务管理服务。</p>
</li>
<li><p>Web 与远程调用</p>
<p>  该模块提供了一个强大的 MVC 框架，同时还提供了一些其他远程调用框架 HTTP invoker，还提供了对 REST API 的支持。</p>
</li>
<li><p>Instrumentation</p>
<p>  提供了为 JVM 添加代理的功能，具体讲就是为 Tomcat 添加一个代理能够为 Tomcat 传递类文件。</p>
</li>
<li><p>测试</p>
<p>  Spring 专门提供了对 Spring 应用测试的支持，比如为单元测试提供 mock 对象的实现等。</p>
</li>
</ul>
<h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>通过上面的整理以及一些自己的理解，总算对 Spring 在整体上有一个理解，简单来说 Spring 是一个致力于让 Java 开发变得简单的框架，它的核心在于 DI 和 AOP，通过 DI 和 AOP 来实现代码以及功能模块间的松耦合。因此理解 DI 和 AOP 至关重要。</p>
<p>DI 是组装 Spring 组件的一种方式，在运行期赋予一个对象所依赖的对象。</p>
<p>AOP 能够将一些通用的功能模块化即切面。当 Spring 装配 bean 的时候，这些切面能够在运行期应用到目标对象。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;不知不觉已经捣鼓了小半年的 Java 了，主要一直在使用 Spring boot 来开发，但是由于 Spring boot 使用起来太过简单了，虽然做了这么久但是对 Spring 框架、工作原理等还是一头雾水，很多东西不理解也不知道，所以决定从头开始看 Spring，从最基础最简单的 Spring 开始学习。本篇先来从概念的层面了解一下 Spring。&lt;/p&gt;
    
    </summary>
    
      <category term="Spring" scheme="https://maintel.github.io/categories/Spring/"/>
    
    
      <category term="spring" scheme="https://maintel.github.io/tags/spring/"/>
    
      <category term="spring boot" scheme="https://maintel.github.io/tags/spring-boot/"/>
    
      <category term="java后台" scheme="https://maintel.github.io/tags/java%E5%90%8E%E5%8F%B0/"/>
    
  </entry>
  
  <entry>
    <title>[Android IPC] AIDL 的使用(二)</title>
    <link href="https://maintel.github.io//blog/2017/04/androidIPCAIDL2.html"/>
    <id>https://maintel.github.io//blog/2017/04/androidIPCAIDL2.html</id>
    <published>2017-04-06T07:08:50.000Z</published>
    <updated>2018-03-13T14:46:37.032Z</updated>
    
    <content type="html"><![CDATA[<p>关于 AIDL 的介绍以及基本使用请参看<a href="http://blog.maintel.cn/blog/2017/04/AndroidIPC-AIDL%E7%9A%84%E4%BD%BF%E7%94%A81.html" target="_blank" rel="external">上一篇</a>，本篇主要记录 AIDL 使用中的一些注意事项以及一些高级用法。</p>
<a id="more"></a>
<h1 id="使用监听"><a href="#使用监听" class="headerlink" title="使用监听"></a>使用监听</h1><p>还是接着上一篇博客中的例子，如果想要在客户端被动的接收一些数据，即服务端数据发生变化后通知客户端——观察者模式。</p>
<p>下面就以增加了新书然后通知客户端作为例子来实现：</p>
<p>首先肯定要定义一个接口起名叫 IOnNewBookAddedListener.aidl；</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// IOnNewBookAdded.aidl</span></div><div class="line"><span class="keyword">package</span> com.maintel.binderdemo1.listener;</div><div class="line"></div><div class="line"><span class="comment">//手动引入 Book</span></div><div class="line"><span class="keyword">import</span> com.maintel.binderdemo1.model.Book;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IOnNewBookAddedListener</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onNewBookAdded</span><span class="params">(in Book newBook)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后再 IBookManager.aidl 中增加两个方法用来注册和取消注册；</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.maintel.binderdemo1;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.maintel.binderdemo1.model.Book;</div><div class="line"><span class="keyword">import</span> com.maintel.binderdemo1.listener.IOnNewBookAddedListener;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IBookManager</span> </span>&#123;</div><div class="line">    <span class="function">List&lt;Book&gt; <span class="title">getBookList</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addBook</span><span class="params">(in Book book)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">registerListener</span><span class="params">(IOnNewBookAddedListener listener)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">unregisterListener</span><span class="params">(IOnNewBookAddedListener listener)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后改造服务端实现新增加的方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookManagerService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> CopyOnWriteArrayList&lt;Book&gt; mBookList = <span class="keyword">new</span> CopyOnWriteArrayList&lt;&gt;();</div><div class="line">    <span class="keyword">private</span> RemoteCallbackList&lt;IOnNewBookAddedListener&gt; mListeners = <span class="keyword">new</span> RemoteCallbackList&lt;&gt;();  <span class="comment">//注意这里</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isServiceDestroyed = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate();</div><div class="line">        ...</div><div class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> ServiceWorker()).start();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Nullable</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mBinder;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Binder mBinder = <span class="keyword">new</span> IBookManager.Stub() &#123;</div><div class="line">        </div><div class="line">        ...</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerListener</span><span class="params">(IOnNewBookAddedListener listener)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</div><div class="line">            mListeners.register(listener);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unregisterListener</span><span class="params">(IOnNewBookAddedListener listener)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</div><div class="line">            mListeners.unregister(listener);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceWorker</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">while</span> (!isServiceDestroyed) &#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    Thread.sleep(<span class="number">5000</span>);</div><div class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">int</span> id = mBookList.size() + <span class="number">1</span>;</div><div class="line">                Book b = <span class="keyword">new</span> Book(id, <span class="string">"new book*"</span> + id);</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    onBookAdded(b);</div><div class="line">                &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">onBookAdded</span><span class="params">(Book book)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</div><div class="line">        mBookList.add(book);</div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> N = mListeners.beginBroadcast();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</div><div class="line">            IOnNewBookAddedListener listener = mListeners.getBroadcastItem(i);</div><div class="line">            <span class="keyword">if</span> (listener != <span class="keyword">null</span>) &#123;</div><div class="line">                listener.onNewBookAdded(book);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        mListeners.finishBroadcast();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">        isServiceDestroyed = <span class="keyword">true</span>;</div><div class="line">        <span class="keyword">super</span>.onDestroy();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>修改客户端如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> IBookManager bookManager;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> IOnNewBookAddedListener onNewBookAddedListener = <span class="keyword">new</span> IOnNewBookAddedListener.Stub() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNewBookAdded</span><span class="params">(Book newBook)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</div><div class="line">            System.err.println(Thread.currentThread());  <span class="comment">//将当前线程打印出来</span></div><div class="line">            Log.d(<span class="string">"MainActivity$newbook"</span>, newBook.toString());</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> ServiceConnection mConnection = <span class="keyword">new</span> ServiceConnection() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceConnected</span><span class="params">(ComponentName componentName, IBinder iBinder)</span> </span>&#123;</div><div class="line">            Log.e(<span class="string">"MainActivity$Connected"</span>, <span class="string">"Thread.currentThread():"</span> + Thread.currentThread());<span class="comment">//将当前线程打印出来</span></div><div class="line">            bookManager = IBookManager.Stub.asInterface(iBinder);</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                bookManager.registerListener(onNewBookAddedListener);</div><div class="line">            &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceDisconnected</span><span class="params">(ComponentName componentName)</span> </span>&#123;</div><div class="line">            Log.e(<span class="string">"MainActivity$Disconnect"</span>, <span class="string">"Thread.currentThread():"</span> + Thread.currentThread());<span class="comment">//将当前线程打印出来</span></div><div class="line">            bookManager = <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (bookManager != <span class="keyword">null</span> &amp;&amp; bookManager.asBinder().isBinderAlive()) &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                bookManager.unregisterListener(onNewBookAddedListener);</div><div class="line">            &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        unbindService(mConnection);</div><div class="line">        <span class="keyword">super</span>.onDestroy();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以上就实现了一个简单的监听，每隔五秒会打印一条书籍的信息。</p>
<p>接下来就要说一些注意事项了，通过上面的代码可以发现在记录 IOnNewBookAddedListener 监听集合的时候使用了 RemoteCallbackList，而不是一般常用的 ArrayList 等为什么呢？</p>
<h1 id="RemoteCallbackList"><a href="#RemoteCallbackList" class="headerlink" title="RemoteCallbackList"></a>RemoteCallbackList</h1><p>虽然常用的注册与解注册方法是传递相同的对象，而且上面也确实传递了同样的对象，但是首先要明白 AIDL 是用来实现多进程通讯的，其底层的 Binder 机制会把客户端传递过来的对象重新转化成一个新的对象，因此即使我们传递了相同的对象来解注册，但是到服务端的时候已经是一个新的对象了。这也是为什么使用自定义的对象的时候必须要实现 Parcelable 接口的原因。</p>
<p>RemoteCallbackList 是系统专门提供用于删除跨进程 listener 的接口，其内部维护了一个 Map 结构来保存所有的 AIDL 回调。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ArrayMap&lt;IBinder,Callback&gt; mCallbacks = <span class="keyword">new</span> ArrayMap&lt;IBinder,Callback&gt;();</div></pre></td></tr></table></figure>
<p>另外 RemoteCallbackList 在客户端进程终止后，会自动清除客户端注册的 listener，而且其内部实现了线程同步功能。</p>
<p>这里要注意的是遍历 RemoteCallbackList 的方法，只能使用下面的方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> i = callbacks.beginBroadcast();</div><div class="line"><span class="keyword">while</span> (i &gt; <span class="number">0</span>) &#123;</div><div class="line">    i--;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        callbacks.getBroadcastItem(i); <span class="comment">// 获取回调</span></div><div class="line">    &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</div><div class="line">       </div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">callbacks.finishBroadcast();</div></pre></td></tr></table></figure>
<p>beginBroadcast() 和 finishBroadcast() 一定要配合使用。</p>
<h1 id="注意-listener-回调所在线程"><a href="#注意-listener-回调所在线程" class="headerlink" title="注意 listener 回调所在线程"></a>注意 listener 回调所在线程</h1><p>当服务端回调 listener 中的方法时，被回调的方法运行在客户端的 Binder 线程池中，所以当<strong>回调需要操作 UI 时记得将线程切换到 UI 线程</strong>，同时，如果客户端回调方法要执行大量耗时操作时，会阻塞服务端发起回调的方法，因此要确保<strong>当客户端回调方法执行耗时操作是，服务端发起回调的方法不要运行在 UI 线程中</strong>。就像例子中 BookManagerService 的 onBookAdded 方法，它调用了客户端的 IOnNewBookAddedListener 的 onNewBookAdded 方法，如果客户端的这个 onNewBookAdded 方法比较耗时的话，要确保 onBookAdded 方法运行在非 UI 线程中。</p>
<h1 id="注意耗时操作"><a href="#注意耗时操作" class="headerlink" title="注意耗时操作"></a>注意耗时操作</h1><p>由于服务端方法本身运行在服务端的 Binder 线程池中，所以服务端的方法本身可以执行大量耗时操作，但是如果在客户端的 UI 线程中调用服务端的耗时方法的话就可能触法 ANR 异常，因为<strong>当客户端调用服务端方法时客户端的现成会被挂起直到服务端执行完毕</strong>。</p>
<p>所以当需要调用服务端的耗时方法时，客户端请务必放在子线程中操作。</p>
<h1 id="死亡监听"><a href="#死亡监听" class="headerlink" title="死亡监听"></a>死亡监听</h1><p>可以有两个方法对 Service 的异常结束做监听。</p>
<ul>
<li><p>给 Binder 添加 DeathRecipient 监听，当 Binder 死亡时会收到 binderDeid 回调</p>
<p>  此方法运行在 Binder 线程池中。</p>
</li>
<li><p>在 onServiceDisconnected 中做监听，当 Service 异常结束时会调用此方法</p>
<p>  此方法运行在 UI 线程中。</p>
</li>
</ul>
<h1 id="权限检查"><a href="#权限检查" class="headerlink" title="权限检查"></a>权限检查</h1><ul>
<li>可以通过自定义权限然后在 onBind 中进行权限验证；</li>
<li>通过自定义权限在 onTransact 中进行验证；</li>
<li>通过 Uid 和Pid 在 onTransact 中进行验证；</li>
<li>为 Service 制定 android:permission 属性来验证；</li>
</ul>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li>《Android 开发艺术探索》-任玉刚</li>
<li><a href="https://developer.android.google.cn/guide/components/aidl.html?hl=zh-cn#PassingObjects" target="_blank" rel="external">Android 接口定义语言 (AIDL)</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于 AIDL 的介绍以及基本使用请参看&lt;a href=&quot;http://blog.maintel.cn/blog/2017/04/AndroidIPC-AIDL%E7%9A%84%E4%BD%BF%E7%94%A81.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;上一篇&lt;/a&gt;，本篇主要记录 AIDL 使用中的一些注意事项以及一些高级用法。&lt;/p&gt;
    
    </summary>
    
      <category term="android技术" scheme="https://maintel.github.io/categories/android%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="跨进程" scheme="https://maintel.github.io/tags/%E8%B7%A8%E8%BF%9B%E7%A8%8B/"/>
    
      <category term="IPC" scheme="https://maintel.github.io/tags/IPC/"/>
    
      <category term="Binder" scheme="https://maintel.github.io/tags/Binder/"/>
    
      <category term="AIDL" scheme="https://maintel.github.io/tags/AIDL/"/>
    
  </entry>
  
  <entry>
    <title>[Android IPC] AIDL 的使用(一)</title>
    <link href="https://maintel.github.io//blog/2017/04/AndroidIPC-AIDL%E7%9A%84%E4%BD%BF%E7%94%A81.html"/>
    <id>https://maintel.github.io//blog/2017/04/AndroidIPC-AIDL的使用1.html</id>
    <published>2017-04-04T09:49:35.000Z</published>
    <updated>2018-03-13T14:46:37.031Z</updated>
    
    <content type="html"><![CDATA[<h1 id="AIDL"><a href="#AIDL" class="headerlink" title="AIDL"></a>AIDL</h1><p>AIDL(Android Interface Definition Language) 翻译成中文就是 Android 接口定义语言，用于生成 Android 设备上两个进程之间进行通讯的代码。它是 Binder 机制向外提供的接口，它使用代理类在客户端和服务端传递数据。</p>
<a id="more"></a>
<p>本篇主要记录 AIDL 学习过程以及一些坑。</p>
<h1 id="AIDL-的使用"><a href="#AIDL-的使用" class="headerlink" title="AIDL 的使用"></a>AIDL 的使用</h1><p>AIDL 的使用主要分为以下三步：</p>
<ul>
<li><p>创建 .aidl 文件</p>
<p>  即 AIDL 接口，是服务端暴露给客户端的接口，服务端和客户端其实就是通过这些接口来通讯的。</p>
</li>
<li><p>服务端</p>
<p>  创建一个 service 用来监听客户端的请求，然后再其中实现定义好的 AIDL 接口即可。</p>
</li>
<li><p>客户端</p>
<p>  绑定服务端的 service，将服务端返回的 Binder 对象转换成 AIDL 接口类型，接着调用 AIDL 中的方法就可以了。</p>
</li>
</ul>
<h2 id="创建-aidl-文件"><a href="#创建-aidl-文件" class="headerlink" title="创建 .aidl 文件"></a>创建 .aidl 文件</h2><p>这里有一个 Book 类，服务端与客户端之间传递的主要数据实体就是它了。在创建 .aidl 文件前先建立此类。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.maintel.binderdemo1.model;</div><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> <span class="keyword">implements</span> <span class="title">Parcelable</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> boolId;</div><div class="line">    <span class="keyword">private</span> String bookName;</div><div class="line"></div><div class="line">    ...<span class="comment">//为了节省篇幅这里省略了一些代码，get set 以及 实现 Parcelable 接口的一些代码</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里为什么要实现 Parcelable 是因为 AIDL 在实现进程间通讯的过程时就是一个对数据序列化和反序列化的过程。</p>
<p>AIDL 文件支持的数据类型如下：</p>
<ul>
<li>Java 编程语言中的所有原语类型（如 int、long、char、boolean 等等）</li>
<li>String 和 CharSequence</li>
<li><p>List</p>
<p>  List 中的所有元素都必须是以上列表中支持的数据类型、其他 AIDL 生成的接口或声明的可打包类型。 可选择将 List 用作“通用”类（例如，List<string>）。另一端实际接收的具体类始终是 ArrayList，但生成的方法使用的是 List 接口。</string></p>
</li>
<li><p>Map</p>
<p>  Map 中的所有元素都必须是以上列表中支持的数据类型、其他 AIDL 生成的接口或声明的可打包类型。 不支持通用 Map（如 Map<string,integer> 形式的 Map）。 另一端实际接收的具体类始终是 HashMap，但生成的方法使用的是 Map 接口。</string,integer></p>
</li>
<li><p>实现了 Parcelable 接口的对象</p>
</li>
</ul>
<p>下面就来创建所需的 .aidl 文件</p>
<p>快速创建 aidl 文件可以如下步骤：</p>
<p><img src="http://blogqn.maintel.cn/创建aidl1.png?e=3080192722&amp;token=kDSqSAyKGaf8JcHprWP7S4W3hGuz8kDIEhzAufWH:luqc2vxLIk7QCHtY5x0wIBXxUss=" alt=""></p>
<p>因为用到了 Book 这个类，所以也要创建 Book.aidl 如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Book.aidl</span></div><div class="line"><span class="keyword">package</span> com.maintel.binderdemo1.model;</div><div class="line"></div><div class="line">parcelable Book;  <span class="comment">//注意这里的 parcelable 和 Parcelable 不一样，前者是一个类型</span></div></pre></td></tr></table></figure>
<p><em>注意这里<code>package com.maintel.binderdemo1.model</code>必须要和 Book 类的包名一致！要不然在自动生成的时候会找不到类</em></p>
<p>然后创建接口类 IBookManager.aidl</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// IBookManager.aidl</span></div><div class="line"><span class="keyword">package</span> com.maintel.binderdemo1;</div><div class="line"></div><div class="line"><span class="comment">// Declare any non-default types here with import statements</span></div><div class="line"><span class="keyword">import</span> com.maintel.binderdemo1.model.Book;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IBookManager</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function">List&lt;Book&gt; <span class="title">getBookList</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addBook</span><span class="params">(in Book book)</span></span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>关于上面的代码：</p>
<ul>
<li><p><code>import com.maintel.binderdemo1.model.Book;</code></p>
<p>  因为下面的方法中用到的 Book, 所以我们需要显式的引入进来，即使有时候两者在同一个包下。</p>
</li>
<li><p><code>void addBook(in Book book);</code> 中的 in</p>
<p>  除了基本数据类型外，其他的类型参数必须标上 in、out、inout，in 表示输入型参数，out 表示输出型参数，inout 表示输入输出型参数。</p>
</li>
</ul>
<p>至此接口类就已经完成了，此时 build 一下项目如果使用的是 Android studio 会在 app/build/generated/source/aidl/debug/package name 下看到自动生成的 IBookManager。</p>
<h2 id="创建服务端"><a href="#创建服务端" class="headerlink" title="创建服务端"></a>创建服务端</h2><p>服务端就很简单了，首先新建一个名为 BookManagerService 的 service：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.maintel.binderdemo1.service;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookManagerService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> CopyOnWriteArrayList&lt;Book&gt; mBookList = <span class="keyword">new</span> CopyOnWriteArrayList&lt;&gt;();</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate();</div><div class="line">        mBookList.add(<span class="keyword">new</span> Book(<span class="number">1</span>, <span class="string">"Java"</span>));</div><div class="line">        mBookList.add(<span class="keyword">new</span> Book(<span class="number">2</span>, <span class="string">"JS"</span>));</div><div class="line">        mBookList.add(<span class="keyword">new</span> Book(<span class="number">3</span>, <span class="string">"Android"</span>));</div><div class="line">    &#125;   </div><div class="line"></div><div class="line">    <span class="meta">@Nullable</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mBinder;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Binder mBinder = <span class="keyword">new</span> IBookManager.Stub() &#123;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> List&lt;Book&gt; <span class="title">getBookList</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException </span>&#123;</div><div class="line">            <span class="keyword">return</span> mBookList;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addBook</span><span class="params">(Book book)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</div><div class="line">            mBookList.add(book);</div><div class="line">        &#125;</div><div class="line">    &#125;; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里使用了 CopyOnWriteArrayList 它不是继承自 ArrayList 的，但是为什么可以使用呢？是因为 AIDL 支持的是抽象的 List 接口，因此虽然服务端返回的是 CopyOnWriteArrayList，但是在 Binder 中还是按照 List 的规范去访问数据，最终形成一个 ArrayList 返回给客户端。</p>
<p>在清单文件中注册，并使其运行在另外的进程中：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">service</span></span></div><div class="line">    <span class="attr">android:name</span>=<span class="string">".service.BookManagerService"</span></div><div class="line">    <span class="attr">android:process</span>=<span class="string">":remote"</span>/&gt;</div></pre></td></tr></table></figure>
<h2 id="客户端实现"><a href="#客户端实现" class="headerlink" title="客户端实现"></a>客户端实现</h2><p>客户端的实现就是一个绑定 service 的过程：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> IBookManager bookManager;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> ServiceConnection mConnection = <span class="keyword">new</span> ServiceConnection() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceConnected</span><span class="params">(ComponentName componentName, IBinder iBinder)</span> </span>&#123;</div><div class="line">            bookManager = IBookManager.Stub.asInterface(iBinder);</div><div class="line"></div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                bookManager.addBook(<span class="keyword">new</span> Book(<span class="number">4</span>,<span class="string">"Html"</span>)); <span class="comment">//这里调用 addBook 添加一本书</span></div><div class="line">                List&lt;Book&gt; list = bookManager.getBookList();</div><div class="line">                Log.d(<span class="string">"MainActivity"</span>, list.toString());</div><div class="line">            &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceDisconnected</span><span class="params">(ComponentName componentName)</span> </span>&#123;</div><div class="line">            Log.d(<span class="string">"MainActivity.onServiceDisconnected"</span>);</div><div class="line">            bookManager = <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        Log.e(<span class="string">"MainActivity"</span>, <span class="string">"Thread.currentThread():"</span> + Thread.currentThread());</div><div class="line">        Intent intent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, BookManagerService.class);</div><div class="line">        bindService(intent, mConnection, BIND_AUTO_CREATE);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">        unbindService(mConnection);</div><div class="line">        <span class="keyword">super</span>.onDestroy();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>此时运行客户端程序打印出 log：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">D/MainActivity: [Book&#123;boolId=1, bookName=&apos;Java&apos;&#125;, Book&#123;boolId=2, bookName=&apos;JS&apos;&#125;, Book&#123;boolId=3, bookName=&apos;Android&apos;&#125;, Book&#123;boolId=4, bookName=&apos;Html&apos;&#125;]</div></pre></td></tr></table></figure>
<p>至此一次完整的使用 AIDL 进行 IPC 的过程就完成了。</p>
<p>至于其使用过程中的一些注意事项后面再说。</p>
<h1 id="关于-AIDL-的理解"><a href="#关于-AIDL-的理解" class="headerlink" title="关于 AIDL 的理解"></a>关于 AIDL 的理解</h1><p>我个人关于 AIDL 的一些理解，不知道是否准确</p>
<p>AIDL 是一门语言，它是为了更方便的使用 Binder 而生的。按照规范写一个 .aidl 文件，插件会自动生成同名的 java 文件，而这些 java 文件才是具体实现，为什么要有 AIDL 其实是为了更标准化以及简化 Binder 的使用，让开发者更多的关注与功能的实现上。</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li>《Android 开发艺术探索》-任玉刚</li>
<li><a href="https://developer.android.google.cn/guide/components/aidl.html?hl=zh-cn#PassingObjects" target="_blank" rel="external">Android 接口定义语言 (AIDL)</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;AIDL&quot;&gt;&lt;a href=&quot;#AIDL&quot; class=&quot;headerlink&quot; title=&quot;AIDL&quot;&gt;&lt;/a&gt;AIDL&lt;/h1&gt;&lt;p&gt;AIDL(Android Interface Definition Language) 翻译成中文就是 Android 接口定义语言，用于生成 Android 设备上两个进程之间进行通讯的代码。它是 Binder 机制向外提供的接口，它使用代理类在客户端和服务端传递数据。&lt;/p&gt;
    
    </summary>
    
      <category term="android技术" scheme="https://maintel.github.io/categories/android%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="跨进程" scheme="https://maintel.github.io/tags/%E8%B7%A8%E8%BF%9B%E7%A8%8B/"/>
    
      <category term="IPC" scheme="https://maintel.github.io/tags/IPC/"/>
    
      <category term="Binder" scheme="https://maintel.github.io/tags/Binder/"/>
    
      <category term="AIDL" scheme="https://maintel.github.io/tags/AIDL/"/>
    
  </entry>
  
  <entry>
    <title>jenkins+gradle+git持续集成</title>
    <link href="https://maintel.github.io//blog/2017/03/jenkins-gradle-git%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90.html"/>
    <id>https://maintel.github.io//blog/2017/03/jenkins-gradle-git持续集成.html</id>
    <published>2017-03-15T07:01:55.000Z</published>
    <updated>2018-03-13T14:46:37.029Z</updated>
    
    <content type="html"><![CDATA[<p>本篇文章的目标是实现一个基于 Jenkins、Gradle、git的持续集成环境。</p>
<p>上一篇实现了 <a href="http://blog.maintel.cn/blog/2017/03/gradle%E8%87%AA%E5%8A%A8%E6%9E%84%E5%BB%BA%E9%85%8D%E7%BD%AE-%E4%B8%80.html" target="_blank" rel="external">gradle 自动化构建</a>的功能，但是总是觉得不够智能，有没有一种办法可以使程序自动打包完成并通知相关人员呢？答案就是本篇要讲的 Jenkins。</p>
<a id="more"></a>
<h1 id="持续集成"><a href="#持续集成" class="headerlink" title="持续集成"></a>持续集成</h1><p><strong>持续集成（Continuous Integration）</strong></p>
<p>首先是持续集成，我知道持续集成还是从做后台的哥们儿那里，概念就如字面意思：</p>
<blockquote>
<p>持续集成指的是，频繁地（一天多次）将代码集成到主干。持续集成的目的，就是让产品可以快速迭代，同时还能保持高质量。它的核心措施是，代码集成到主干之前，必须通过自动化测试。只要有一个测试用例失败，就不能集成。</p>
</blockquote>
<p>与持续集成相关的，还有两个概念，分别是持续交付和持续部署。</p>
<p><strong>持续交付（Continuous delivery）</strong></p>
<blockquote>
<p>频繁地将软件的新版本，交付给质量团队或者用户，以供评审。如果评审通过，代码就进入生产阶段。持续交付可以看作持续集成的下一步。它强调的是，不管怎么更新，软件是随时随地可以交付的。</p>
</blockquote>
<p><strong>持续部署（continuous deployment）</strong></p>
<blockquote>
<p>持续交付的下一步，指的是代码通过评审以后，自动部署到生产环境。</p>
</blockquote>
<p>简单看概念来说本篇文章实现的功能是持续集成和持续交付，即代码持续集成后自动打包生产出测试包然后通知测试人员测试，而不用开发人员再手动的去打包发送等。</p>
<h1 id="Jenkins"><a href="#Jenkins" class="headerlink" title="Jenkins"></a>Jenkins</h1><p><a href="https://jenkins.io/" target="_blank" rel="external">Jenkins</a> 是一个开源的持续集成工具，可以用它来实现持续集成，同样功能的软件还有 </p>
<ul>
<li><a href="https://travis-ci.com/" target="_blank" rel="external">Travis</a></li>
<li><a href="https://www.codeship.io/" target="_blank" rel="external">Codeship</a></li>
<li><a href="http://stridercd.com/" target="_blank" rel="external">Strider</a></li>
</ul>
<p>下面就来实践一个持续集成的工程。</p>
<h1 id="安装-Jenkins"><a href="#安装-Jenkins" class="headerlink" title="安装 Jenkins"></a>安装 Jenkins</h1><p>首先在<a href="https://jenkins.io/download/" target="_blank" rel="external">这里</a>下载 Jenkins，Jenkins 官方提供了 war 包以及其他的个各种操作系统的安装程序。windows 平台下可以有两个选择：</p>
<ul>
<li><p>war 包</p>
<p>  只需运行 java -jar jenkins.war 即可</p>
</li>
<li><p>msi 文件</p>
<p>  直接运行即可</p>
</li>
</ul>
<p>本篇文章选用安装文件的方式，安装成功后会自动访问 <code>http://localhost:8080</code> ,并自动生成一个随机的密码在 <code>root\jenkins\secrets\initialAdminPassword</code>。如果启动不能成功，可能端口号冲突修改一个端口号即可。</p>
<p>修改端口号方法:打开 <code>root\jenkins.xml</code>找到<code>--httpPort=8080</code>修改，然后执行<code>net stop jenkins</code>和<code>net start jenkins</code>重启 Jenkins（如果提示拒绝访问，使用管理员权限）。</p>
<p>重新访问修改后的地址，然后填入密码等待刷新完成。</p>
<p>然后选择安装插件，我是直接选择左边使用推荐来自动完成，也可以选择右边自定义其中几个重要的插件 Gradle(gradle plugin)、git(git plugin)、邮件(email extension plugin)等。</p>
<p>等待插件下载完成要创建一个用户，创建完成即进入首页。</p>
<p><img src="http://blogqn.maintel.cn/TIM截图20170829114554.png?e=3080777649&amp;token=kDSqSAyKGaf8JcHprWP7S4W3hGuz8kDIEhzAufWH:ggLh6k9SXOxaJd0jgv7VPWrkYbs=" alt=""></p>
<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><ul>
<li>权限配置</li>
</ul>
<p>系统管理 - Configure Global Security，通过安全矩阵对不同角色或者组进行权限配置，具体说明请自行google。</p>
<p><img src="http://blogqn.maintel.cn/TIM截图20170829145712.png?e=3080789153&amp;token=kDSqSAyKGaf8JcHprWP7S4W3hGuz8kDIEhzAufWH:g05yRNWoxALajGkXxisnZTUD_1c=" alt=""></p>
<ul>
<li><p>gradle插件配置</p>
<p>gradle 插件等进行配置,这里主要是为了防止项目配置中的 gradle 和 android 项目的 gradle 版本不同导致构建失败。</p>
</li>
</ul>
<p>系统管理 - Global Tool Configuration</p>
<p>选择 gradle配置,配置常用的 gradle 版本。可以手动指定目录，也可以选择自动安装。</p>
<p><img src="http://blogqn.maintel.cn/TIM截图20170829115828.png?e=3080778403&amp;token=kDSqSAyKGaf8JcHprWP7S4W3hGuz8kDIEhzAufWH:PFPIh4V-L4tEXNq1XZhvtUKkvrE=" alt=""></p>
<ul>
<li>邮件服务器配置</li>
</ul>
<p>系统管理 - 系统设置。</p>
<p>这里要注意 SMTP认证 的邮箱一定要和上面 Jenkins Location 设置中系统管理员邮件地址一样，不然不能成功。配置完成可以使用测试邮件提示 <code>Email was successfully sent</code> 则代表成功。</p>
<p><img src="http://blogqn.maintel.cn/TIM截图20170829143712.png?e=3080787927&amp;token=kDSqSAyKGaf8JcHprWP7S4W3hGuz8kDIEhzAufWH:J-8IRzHuAhyABZ5nI8zC1bwXhJQ=" alt=""></p>
<h1 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h1><p>这里假设已经有一个android gradle项目名为 JenkinsTest，并已经推送到 git 远程仓库。</p>
<ul>
<li>点击创建一个新任务</li>
</ul>
<p><img src="http://blogqn.maintel.cn/TIM截图20170829114902.png?e=3080777839&amp;token=kDSqSAyKGaf8JcHprWP7S4W3hGuz8kDIEhzAufWH:XAe_RUlK7xKDDkgHs64OkG8KlJ8=" alt=""></p>
<p>这里选择<code>构建一个自由风格的软件项目</code>。选择 ok 配置项目</p>
<ul>
<li>源码管理选择 git 填入 git 项目地址</li>
</ul>
<p><img src="http://blogqn.maintel.cn/TIM截图20170829141008.png?e=3080786413&amp;token=kDSqSAyKGaf8JcHprWP7S4W3hGuz8kDIEhzAufWH:lZYyiqufEgNYNbpRV7r84Z2ajXY=" alt=""></p>
<p>这里可以全局配置好直接选择账号，也可以设置 git 账号，点击<code>add</code>，</p>
<p><img src="http://blogqn.maintel.cn/TIM截图20170829141036.png?e=3080786589&amp;token=kDSqSAyKGaf8JcHprWP7S4W3hGuz8kDIEhzAufWH:NHzIV4cikgmtVy6yHRa5e6BZba4=" alt=""></p>
<ul>
<li>配置构建触发器</li>
</ul>
<p>这里选择使用 <code>Poll SCM</code> (定时检查源码变更)，Jenkins 会根据配置定期的检查更新，如果有更新就下载并进行构建。他的语法如下：</p>
<p>总共有五个参数 <em> \</em> * * *,</p>
<p>第一个参数代表的是分钟 minute，取值 0~59；</p>
<p>第二个参数代表的是小时 hour，取值 0~23；</p>
<p>第三个参数代表的是天 day，取值 1~31；</p>
<p>第四个参数代表的是月 month，取值 1~12；</p>
<p>最后一个参数代表的是星期 week，取值 0~7，0 和 7 都是表示星期天。</p>
<p>H/5 * * * * 就代表每五分钟检查一次。</p>
<p><img src="http://blogqn.maintel.cn/TIM截图20170829141741.png?e=3080786790&amp;token=kDSqSAyKGaf8JcHprWP7S4W3hGuz8kDIEhzAufWH:Ym2PmBqmpTyYqIo2cX_K_favKGM=" alt=""></p>
<ul>
<li>构建工具</li>
</ul>
<p>增加构建步骤 - <code>Invoke Gradle script</code>，然后选择 Gradle 的版本，在 Tasks 中增加构建的命令</p>
<p><img src="http://blogqn.maintel.cn/TIM截图20170829142837.png?e=3080787407&amp;token=kDSqSAyKGaf8JcHprWP7S4W3hGuz8kDIEhzAufWH:THm64jdST0OAq6GJ4exdze8ByqA=" alt=""></p>
<ul>
<li>构建后操作</li>
</ul>
<p>将生成的 apk 输出保存出来，如果没有在 gradle 中配置 apk 的输出路径，则默认为 <code>app/build/outputs/apk/*.apk</code>，还可以选择发送邮件通知相关人员比如测试。</p>
<p><img src="http://blogqn.maintel.cn/TIM截图20170829144316.png?e=3080788431&amp;token=kDSqSAyKGaf8JcHprWP7S4W3hGuz8kDIEhzAufWH:e5UyTjmxA0ZSd6Xy-O166O7WuO0=" alt=""></p>
<p>至此，所有配置已经完成。</p>
<h1 id="构建项目"><a href="#构建项目" class="headerlink" title="构建项目"></a>构建项目</h1><p>配置完成以后项目目录</p>
<p><img src="http://blogqn.maintel.cn/TIM截图20170829160457.png?e=3080793212&amp;token=kDSqSAyKGaf8JcHprWP7S4W3hGuz8kDIEhzAufWH:FexLRdQn-HRDOnGkFhribYCMw80=" alt=""></p>
<p>可以点击工作空间查看获取的代码是否正确。</p>
<p>可以在构建历史列表看到一些以往的构建结果，点击进入可以看到一些构建结果，包含git的信息等。</p>
<p><img src="http://blogqn.maintel.cn/TIM截图20170829160514.png?e=3080793212&amp;token=kDSqSAyKGaf8JcHprWP7S4W3hGuz8kDIEhzAufWH:-a7nunCz7T9VbJWHVN44cRS5fwM=" alt=""></p>
<p>在 Console Output 中可以看到控制台的编译输出，如果编译失败可以在这里找到一些有用的信息</p>
<p><img src="http://blogqn.maintel.cn/TIM截图20170829145153.png?e=3080788978&amp;token=kDSqSAyKGaf8JcHprWP7S4W3hGuz8kDIEhzAufWH:2g8DWpNwJbOrXYbasJCQolqDpe0=" alt=""></p>
<p>以上一个简单的使用 Jenkins、Gradle、git 的持续集成环境就搭建完成了，每次将代码合并到主分支 push 以后就会自动打包，并通知相关人员。</p>
<p>乍一看觉得作用不大，不过仔细想想好像还是有那么点用的额。算是偷懒吧，不用每次手动打包然后再去上传包到测试平台等等，而且不单单是 Android 主要是后台可以在自动构建完成后执行脚本重启服务自动部署等等，作用也挺大。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇文章的目标是实现一个基于 Jenkins、Gradle、git的持续集成环境。&lt;/p&gt;
&lt;p&gt;上一篇实现了 &lt;a href=&quot;http://blog.maintel.cn/blog/2017/03/gradle%E8%87%AA%E5%8A%A8%E6%9E%84%E5%BB%BA%E9%85%8D%E7%BD%AE-%E4%B8%80.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;gradle 自动化构建&lt;/a&gt;的功能，但是总是觉得不够智能，有没有一种办法可以使程序自动打包完成并通知相关人员呢？答案就是本篇要讲的 Jenkins。&lt;/p&gt;
    
    </summary>
    
      <category term="android技术" scheme="https://maintel.github.io/categories/android%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="自动化" scheme="https://maintel.github.io/tags/%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
    
      <category term="jenkins" scheme="https://maintel.github.io/tags/jenkins/"/>
    
      <category term="持续集成" scheme="https://maintel.github.io/tags/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/"/>
    
  </entry>
  
  <entry>
    <title>gradle自动构建配置(一)</title>
    <link href="https://maintel.github.io//blog/2017/03/gradle%E8%87%AA%E5%8A%A8%E6%9E%84%E5%BB%BA%E9%85%8D%E7%BD%AE-%E4%B8%80.html"/>
    <id>https://maintel.github.io//blog/2017/03/gradle自动构建配置-一.html</id>
    <published>2017-03-05T08:18:34.000Z</published>
    <updated>2018-03-13T14:46:37.027Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>在日常的开发中，特别是进入版本快速迭代的时候，需要不停的修改配置，测试环境、线上环境配置，测试包、正式包的打包等等，不但过程繁琐而且还容易出错，所以查询了相关资料尽量实现自动化配置。</p>
<a id="more"></a>
<p>目标：</p>
<ul>
<li><p>根据构建环境自动配置代码参数。</p>
</li>
<li><p>自动打包不同的KEY的app。</p>
</li>
<li><p>apk输出路径和名称配置。</p>
</li>
</ul>
<p>接下来就开始吧。</p>
<h1 id="技术概要"><a href="#技术概要" class="headerlink" title="技术概要"></a>技术概要</h1><p>本文的目标主要都是通过修改 app/build.gradle 文件来实现的。</p>
<blockquote>
<p>gradle 提供了构建项目的一个框架，而它本身来使用 Groovy 来声明设置，Groovy 本身也可以理解成一个语言，有自己的语法、可执行等等，在越来越多使用 gradle 来构建项目的今天，其实学习它的语法也是很有必要的。</p>
</blockquote>
<h1 id="根据构建环境自动配置代码参数"><a href="#根据构建环境自动配置代码参数" class="headerlink" title="根据构建环境自动配置代码参数"></a>根据构建环境自动配置代码参数</h1><p>可能概括的不是很好，举个例子就是在项目开发过程中，测试开发环境和线上环境肯定不会使用同样的服务器，这里就是通过 gradle 来实现自动化的配置。</p>
<p>下面就通过这个例子来说明。</p>
<p>例如之前的代码：</p>
<p><img src="http://blogqn.maintel.cn/自动化构建服务器接口old.png?e=3079754286&amp;token=kDSqSAyKGaf8JcHprWP7S4W3hGuz8kDIEhzAufWH:FbLV8JK8VcdWxKaoVWkgHhE3fkI=" alt="自动化构建old接口"></p>
<p>每次发版的时候都要修改上面的代码来切换接口环境，这样做虽然不是很麻烦，但是毕竟不够优雅，而且保不准哪次就忘了。所以引入了自动化构建。</p>
<p>首先在 app/bulid.gradle 中添加如下代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">android &#123;</div><div class="line">    ...</div><div class="line">     buildTypes &#123;</div><div class="line">          release &#123;</div><div class="line">              buildConfigField(&quot;String&quot;, &quot;BASE_URL&quot;, &quot;\&quot;http://www.google.com/\&quot;&quot;)</div><div class="line">              buildConfigField(&quot;String&quot;, &quot;Base_QINIU&quot;, &quot;\&quot;http://www.qiniu.com/\&quot;&quot;)</div><div class="line">          &#125;</div><div class="line">          debug&#123;</div><div class="line">              debuggable true  //表示是debug版本</div><div class="line">              buildConfigField(&quot;String&quot;, &quot;BASE_URL&quot;, &quot;\&quot;http://www.baidu.com/\&quot;&quot;)</div><div class="line">              buildConfigField(&quot;String&quot;, &quot;Base_QINIU&quot;, &quot;\&quot;http://www.qiniu.com/\&quot;&quot;)</div><div class="line">          &#125;</div><div class="line">     &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>首先 ReBuild 一下，然后修改之前接口文件代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">String BASE_URL = BuildConfig.BASE_URL; </div><div class="line">String Base_QINIU = BuildConfig.Base_QINIU;</div></pre></td></tr></table></figure>
<p>这样再直接运行的时候就会自动使用 debug 版本的接口，而正式打包的时候则会使用正式的接口。</p>
<h1 id="自动打包不同KEY的app"><a href="#自动打包不同KEY的app" class="headerlink" title="自动打包不同KEY的app"></a>自动打包不同KEY的app</h1><p>同样的可以通过配置来实现一次打包不同签名文件的apk。配置方法如下：</p>
<p>还是在 app/build.gradle 中：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">android &#123;</div><div class="line">    ...</div><div class="line"></div><div class="line">    signingConfigs &#123;</div><div class="line">        release &#123;</div><div class="line">            keyAlias &apos;blelock&apos;  //别名</div><div class="line">            keyPassword &apos;xxxx&apos;  //别名密码</div><div class="line">            storeFile file(&apos;../lockBle.jks&apos;)  //文件路径  默认根目录为app下，所以 ../代表app目录的上级目录</div><div class="line">            storePassword &apos;xxxx&apos;  //密码</div><div class="line">        &#125;</div><div class="line">        debug &#123;</div><div class="line">            keyAlias &apos;blelock_debug&apos;</div><div class="line">            keyPassword &apos;xxxx&apos;</div><div class="line">            storeFile file(&apos;../lockBle_debug.jks&apos;)</div><div class="line">            storePassword &apos;xxxx&apos;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">     buildTypes &#123;</div><div class="line">          release &#123;</div><div class="line">              signingConfig signingConfigs.release  //使用 release 配置的key</div><div class="line">          &#125;</div><div class="line">          debug&#123;</div><div class="line">              debuggable true  //表示是debug版本</div><div class="line">              signingConfig signingConfigs.debug   //使用 debug 配置的key</div><div class="line">          &#125;</div><div class="line">     &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后点击 Android studio 中最右边的 Gradle 标签，点击 root - Tasks - build 双击执行 assemble 等待执行完以后，就能在 app/build/outputs/apk 文件夹下看到两个文件，分别为 app-debug.apk 和 app-release.apk。</p>
<p><img src="http://blogqn.maintel.cn/执行build-assemable.png?e=3079756136&amp;token=kDSqSAyKGaf8JcHprWP7S4W3hGuz8kDIEhzAufWH:nQFiJGPF10NwJMFzBcUY_bUkPJE=" alt=""></p>
<p><img src="http://blogqn.maintel.cn/自动签名apk1.png?e=3079756181&amp;token=kDSqSAyKGaf8JcHprWP7S4W3hGuz8kDIEhzAufWH:FataGEYtRIL2PjEKHjWpN_d10E0=" alt=""></p>
<h1 id="apk-输出路径和名称配置"><a href="#apk-输出路径和名称配置" class="headerlink" title="apk 输出路径和名称配置"></a>apk 输出路径和名称配置</h1><p>通过上面实现了自动对 apk 进行不同签名的功能，但是输出 apk 包的位置和名称不够理想和直观，所以再接着进行修改,添加如下。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">android &#123;</div><div class="line">    ...</div><div class="line">     buildTypes &#123;</div><div class="line">          release &#123;</div><div class="line">            applicationVariants.all &#123; variant -&gt;</div><div class="line">                variant.outputs.each &#123; output -&gt;</div><div class="line">                    def outputFile = output.outputFile</div><div class="line">                    def fileName;</div><div class="line">                    if (outputFile != null &amp;&amp; outputFile.name.endsWith(&apos;.apk&apos;)) &#123;</div><div class="line">                        if (variant.buildType.name.equals(&apos;release&apos;)) &#123;  </div><div class="line">                            fileName = &quot;apk$&#123;defaultConfig.versionName&#125;.apk&quot;  //修改正式包的名称 为 apk+版本号.apk</div><div class="line">                        &#125; else if (variant.buildType.name.equals(&apos;debug&apos;)) &#123;</div><div class="line">                            //修改测试包的名称为 apk+版本号-test.apk</div><div class="line">                            fileName = &quot;AiLock$&#123;defaultConfig.versionName&#125;-test.apk&quot;  </div><div class="line">                        &#125;</div><div class="line">                        output.outputFile = new File(&quot;./apk&quot;, fileName)  //修改输出路径为 根/apk 文件夹下，没有则会自动创建</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">          &#125;</div><div class="line">     &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后同样执行上面的 assemble 以后，会在项目根目录生成一个 apk文件夹。</p>
<p><img src="http://blogqn.maintel.cn/生成的apk.png?e=3079757689&amp;token=kDSqSAyKGaf8JcHprWP7S4W3hGuz8kDIEhzAufWH:RtTmEq3ha-pR5aT66b4EugAxx3Q=" alt=""></p>
<p>以上就是一个简单的自动化配置的过程，当然还有很多其他的配置，以后慢慢研究吧。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;在日常的开发中，特别是进入版本快速迭代的时候，需要不停的修改配置，测试环境、线上环境配置，测试包、正式包的打包等等，不但过程繁琐而且还容易出错，所以查询了相关资料尽量实现自动化配置。&lt;/p&gt;
    
    </summary>
    
      <category term="android技术" scheme="https://maintel.github.io/categories/android%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="gradle" scheme="https://maintel.github.io/tags/gradle/"/>
    
      <category term="自动化" scheme="https://maintel.github.io/tags/%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>android编译异常&#39;prepareDebugAndroidTestDependencies&#39;</title>
    <link href="https://maintel.github.io//blog/2017/02/android%E7%BC%96%E8%AF%91%E5%BC%82%E5%B8%B8-prepareDebugAndroidTestDependencies.html"/>
    <id>https://maintel.github.io//blog/2017/02/android编译异常-prepareDebugAndroidTestDependencies.html</id>
    <published>2017-02-20T09:08:41.000Z</published>
    <updated>2018-03-13T14:46:37.026Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Error-Execution-failed-for-task-‘-app-prepareDebugAndroidTestDependencies’"><a href="#Error-Execution-failed-for-task-‘-app-prepareDebugAndroidTestDependencies’" class="headerlink" title="Error:Execution failed for task ‘:app:prepareDebugAndroidTestDependencies’."></a>Error:Execution failed for task ‘:app:prepareDebugAndroidTestDependencies’.</h1><a id="more"></a>
<p>今天在测试<a href="https://google.github.io/dagger//" target="_blank" rel="external">Dagger2</a>时遇到异常，运行是能够通过的，但是build时出现下面异常</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Error:Execution failed for task &apos;:app:prepareDebugAndroidTestDependencies&apos;.</div></pre></td></tr></table></figure>
<p><img src="http://orzoelfvh.bkt.clouddn.com/AS%E7%BC%96%E8%AF%91%E5%BC%82%E5%B8%B81.png?attname=&amp;e=1498561805&amp;token=cs2nCfx72Y7hW0_NpFYzb3Jab90IJWraRtphMd-q:j7-nGaeIuTsKDoezJMJ_xHmYxFk" alt="ASyichang"></p>
<p>最后在<a href="https://stackoverflow.com/questions/30558737/execution-failed-for-task-apppreparedebugandroidtestdependencies" target="_blank" rel="external">stackoverflow</a>上找到答案。</p>
<pre><code>在app的build.gradle的android { }中添加如下代码即可：

configurations.all {
    resolutionStrategy.force &apos;com.google.code.findbugs:jsr305:3.0.1&apos;
}
</code></pre><p>具体原因是因为：</p>
<pre><code>When instrumentation tests are run, both the main APK and test APK share the same classpath. Gradle build 

will fail if the main APK and the test APK use the same library (e.g. Guava) but in different versions. If 

gradle didn&apos;t catch that, your app could behave differently during tests and during normal run (including 

crashing in one of the cases).

To make the build succeed, just make sure both APKs use the same version. If the error is about an indirect 

dependency (a library you didn&apos;t mention in your build.gradle), just add a dependency for the newer version 

to the configuration (&quot;compile&quot; or &quot;androidTestCompile&quot;) that needs it. You can also use Gradle&apos;s resolution 

strategy mechanism. You can inspect the dependency tree by running ./gradlew :app:dependencies and ./gradlew 

:app:androidDependencies.
</code></pre><p>大致意思就是：</p>
<pre><code>当运行测试时，主APK和测试APK共享类的路径，当主APK和测试APK使用相同的库但是是不同版本时就会出现这样的错误。
</code></pre><h2 id="另外的解决办法"><a href="#另外的解决办法" class="headerlink" title="另外的解决办法"></a>另外的解决办法</h2><p>除了上面的方案，还有另外一种解决方案，同样来源于<a href="https://stackoverflow.com/questions/36833606/android-support-library-error-after-updating-to-23-3-0/37717407#37717407" target="_blank" rel="external">stackoverflow</a>。</p>
<p>将<code>androidTestCompile</code>替换为<code>androidTestCompile &#39;com.android.support:support-annotations:xx.xx.x&#39;</code>其中xx.xx.x和项目引入的<code>com.android.support:appcompat-v7:xx.xx.x</code>相同即可。</p>
<p>不过此方法在编译后会引起androidTest包下的测试文件异常，不用的删除即可。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Error-Execution-failed-for-task-‘-app-prepareDebugAndroidTestDependencies’&quot;&gt;&lt;a href=&quot;#Error-Execution-failed-for-task-‘-app-prepareDebugAndroidTestDependencies’&quot; class=&quot;headerlink&quot; title=&quot;Error:Execution failed for task ‘:app:prepareDebugAndroidTestDependencies’.&quot;&gt;&lt;/a&gt;Error:Execution failed for task ‘:app:prepareDebugAndroidTestDependencies’.&lt;/h1&gt;
    
    </summary>
    
      <category term="疑难杂症" scheme="https://maintel.github.io/categories/%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87/"/>
    
    
      <category term="编译异常" scheme="https://maintel.github.io/tags/%E7%BC%96%E8%AF%91%E5%BC%82%E5%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title>git使用笔记</title>
    <link href="https://maintel.github.io//blog/2017/02/git%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0.html"/>
    <id>https://maintel.github.io//blog/2017/02/git使用笔记.html</id>
    <published>2017-02-15T08:06:05.000Z</published>
    <updated>2018-03-13T14:46:37.025Z</updated>
    
    <content type="html"><![CDATA[<p>平时工作git使用过程中的一些常用命令，或者遇到的一些问题，留作记录。</p>
<a id="more"></a>
<h1 id="切换账户"><a href="#切换账户" class="headerlink" title="切换账户"></a>切换账户</h1><h2 id="不用ssh切换账号"><a href="#不用ssh切换账号" class="headerlink" title="不用ssh切换账号"></a>不用ssh切换账号</h2><ul>
<li><p>查看本地的用户及邮箱</p>
<p>  <code>git config user.name</code></p>
<p>  <code>git config user.email</code></p>
</li>
<li><p>修改账户</p>
<p>  <code>git config --global user.name &quot;username&quot;</code></p>
<p>  <code>git config --global user.email &quot;email&quot;</code></p>
</li>
</ul>
<h1 id="新建、切换、合并分支"><a href="#新建、切换、合并分支" class="headerlink" title="新建、切换、合并分支"></a>新建、切换、合并分支</h1><ul>
<li><p>新建分支</p>
<p>  <code>git branch xxx</code></p>
</li>
<li><p>切换分支</p>
<p>  <code>git checkout xxx</code></p>
</li>
</ul>
<p>上面两条命令可以用一条命令实现<strong>新建并切换分支</strong></p>
<p> <code>git checkout -b xxx</code></p>
<ul>
<li><p>合并分支</p>
<p> 首先切换到需要合并到的分支，执行</p>
<p> <code>git merge xxx</code> xxx是需要合并过来的分支名</p>
</li>
</ul>
<h1 id="发生冲突"><a href="#发生冲突" class="headerlink" title="发生冲突"></a>发生冲突</h1><h2 id="内容冲突"><a href="#内容冲突" class="headerlink" title="内容冲突"></a>内容冲突</h2><p>出现冲突时会出现<strong>CONFLICT</strong>字样，而且此时分支并不是在某一分支而是在<strong>master|MERGING</strong>；</p>
<p><img src="http://orzoelfvh.bkt.clouddn.com/git%20%E5%90%88%E5%B9%B6%E5%86%B2%E7%AA%81.png?attname=&amp;e=1498205923&amp;token=cs2nCfx72Y7hW0_NpFYzb3Jab90IJWraRtphMd-q:p3zSW1cLxlaHROLLVYT_o1v_ym4" alt="git 内容冲突"></p>
<p>最简单的解决办法是查看冲突的文件，例如上图为<em>git test.txt</em>,打开后可以发现：</p>
<p><img src="http://orzoelfvh.bkt.clouddn.com/git%E5%86%85%E5%AE%B9%E5%86%B2%E7%AA%81%E5%86%85%E5%AE%B9.png?attname=&amp;e=1498206071&amp;token=cs2nCfx72Y7hW0_NpFYzb3Jab90IJWraRtphMd-q:RLFdtKpKUIQVFYWOMg4mos0kllA" alt="git 内容冲突内容"></p>
<p><code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code>和<code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</code> 中间就是发生冲突的地方，此时直接编辑冲突文件，然后把<code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code>和<code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</code>以及中间的等号删除，然后再执行命令<code>git add .</code>以及<code>git commit -m &#39;注释&#39;</code>就解决了冲突。</p>
<h1 id="发生Please-enter-a-commit-message-to-explain-why-this-merge-is-necessary"><a href="#发生Please-enter-a-commit-message-to-explain-why-this-merge-is-necessary" class="headerlink" title="发生Please enter a commit message to explain why this merge is necessary."></a>发生Please enter a commit message to explain why this merge is necessary.</h1><p>这句话的意思就是需要提交消息解释为什么合并是必要的。</p>
<p>此时会弹出VIM界面如图：</p>
<p><img src="http://orzoelfvh.bkt.clouddn.com/%E5%90%88%E5%B9%B6%E5%86%B2%E7%AA%81%E5%87%BA%E7%8E%B0vim.jpg?attname=&amp;e=1498206503&amp;token=cs2nCfx72Y7hW0_NpFYzb3Jab90IJWraRtphMd-q:SoFxxTDV6yk_odh48Ke-EsqRjEY" alt="合并冲出出现vim界面"></p>
<p>此时可以做如下操作</p>
<ul>
<li><p>按键盘字母 i 进入insert模式</p>
</li>
<li><p>修改最上面那行黄色合并信息,可以不修改</p>
</li>
<li><p>按键盘左上角”Esc”</p>
</li>
<li><p>输入”:wq”,注意是冒号+wq,按回车键即可</p>
</li>
</ul>
<p>退出这个界面的话按<code>ctrl + z</code>；</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;平时工作git使用过程中的一些常用命令，或者遇到的一些问题，留作记录。&lt;/p&gt;
    
    </summary>
    
      <category term="git" scheme="https://maintel.github.io/categories/git/"/>
    
    
      <category term="git" scheme="https://maintel.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>retrofit使用Body方式访问接口</title>
    <link href="https://maintel.github.io//blog/2017/02/retrofit%E4%BD%BF%E7%94%A8-body%E6%96%B9%E5%BC%8F%E8%AE%BF%E9%97%AE%E6%8E%A5%E5%8F%A3.html"/>
    <id>https://maintel.github.io//blog/2017/02/retrofit使用-body方式访问接口.html</id>
    <published>2017-02-12T08:24:02.000Z</published>
    <updated>2018-03-13T14:46:37.024Z</updated>
    
    <content type="html"><![CDATA[<p>当服务器接口使用<code>RequestBody</code>方式接收数据的时候。</p>
<a id="more"></a>
<h1 id="服务器更新了"><a href="#服务器更新了" class="headerlink" title="服务器更新了"></a>服务器更新了</h1><p>最近后台服务器调整使用<code>RequestBody</code>以及Json方式接受数据如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/login"</span>, method = RequestMethod.POST)</div><div class="line"><span class="meta">@ResponseBody</span></div><div class="line"><span class="function"><span class="keyword">public</span> GeneralResponse&lt;User&gt; <span class="title">login</span><span class="params">(@RequestBody GeneralRequest&lt;User&gt; request)</span> </span>&#123;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="使用-Body"><a href="#使用-Body" class="headerlink" title="使用@Body"></a>使用@Body</h1><p>项目原来使用的@Field形式参数请求后台的，但是改成@Body方式还是不能访问如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@POST</span>(value = <span class="string">"user/login"</span>)</div><div class="line">Observable&lt;BaseBean&lt;User&gt;&gt; login(<span class="meta">@Body</span> String parameter);</div></pre></td></tr></table></figure>
<p>原来后台是使用@RequestBody方式接收数据，直接解析Body中的json为一个对象来接收参数的。所以请求是body参数应该为<code>RequestBody</code>:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@POST</span>(value = <span class="string">"user/login"</span>)</div><div class="line">Observable&lt;BaseBean&lt;User&gt;&gt; login(<span class="meta">@Body</span> RequestBody parameter);</div></pre></td></tr></table></figure>
<p>同时，需要将请求的参数组装成一个json，然后转成<code>RequestBody</code>方式来上传，于是写了一个通用方法如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">RequestBody <span class="title">assRequestNoSession</span><span class="params">(T bean)</span> </span>&#123;</div><div class="line">    GeneralRequest&lt;T&gt; generalRequest = <span class="keyword">new</span> GeneralRequest&lt;&gt;();</div><div class="line">    generalRequest.setData(bean);</div><div class="line">    Gson gson = <span class="keyword">new</span> Gson();</div><div class="line">    <span class="keyword">return</span> RequestBody.create(MediaType.parse(<span class="string">"application/json"</span>), gson.toJson(generalRequest));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="添加请求头"><a href="#添加请求头" class="headerlink" title="添加请求头"></a>添加请求头</h1><p>但是修改以后还是不能成功访问后台，经过查阅资料发现因为后台是使用Json方式接受的，所以应该在请求头中添加<code>Content-Type: application/json</code>:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Headers</span>(&#123;<span class="string">"Content-Type: application/json"</span>&#125;)</div><div class="line"><span class="meta">@POST</span>(value = <span class="string">"user/login"</span>)</div><div class="line">Observable&lt;BaseBean&lt;User&gt;&gt; login(<span class="meta">@Body</span> RequestBody parameter);</div></pre></td></tr></table></figure>
<p>这样倒可是访问后台了，但是为每一个接口都添加请求头不够优雅，因此想到了使用拦截器，在Okhttp中添加如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">OkHttpClient.Builder builder = <span class="keyword">new</span> OkHttpClient.Builder();</div><div class="line">builder.addInterceptor(<span class="keyword">new</span> Interceptor() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> Response <span class="title">intercept</span><span class="params">(Chain chain)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">                Request newRequest = chain.request().newBuilder()</div><div class="line">                        .addHeader(<span class="string">"Content-Type"</span>, <span class="string">"application/json"</span>)</div><div class="line">                        .build();</div><div class="line">                <span class="keyword">return</span> chain.proceed(newRequest);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure>
<p>这样，就可以正确的使用Body方式请求网络了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当服务器接口使用&lt;code&gt;RequestBody&lt;/code&gt;方式接收数据的时候。&lt;/p&gt;
    
    </summary>
    
      <category term="android技术" scheme="https://maintel.github.io/categories/android%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Refrofit" scheme="https://maintel.github.io/tags/Refrofit/"/>
    
  </entry>
  
  <entry>
    <title>Retrofit、OKHttp访问接口时添加公共参数</title>
    <link href="https://maintel.github.io//blog/2017/02/Retrofit%E3%80%81OKHttp%E8%AE%BF%E9%97%AE%E6%8E%A5%E5%8F%A3%E6%97%B6%E6%B7%BB%E5%8A%A0%E5%85%AC%E5%85%B1%E5%8F%82%E6%95%B0.html"/>
    <id>https://maintel.github.io//blog/2017/02/Retrofit、OKHttp访问接口时添加公共参数.html</id>
    <published>2017-02-10T08:08:50.000Z</published>
    <updated>2018-03-13T14:46:37.023Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h1><p>在实际的开发中，有时候后台需要在每个接口中带有一些公共的参数，比如当前APP的版本、访问时间、或者一些约定的秘钥等等，当然我们可以在每个接口中都添加这样的参数就可以了，但是那样做对一个程序员来说肯定不够优雅，所以就想怎么在接口请求的时候统一的对所有的接口加上这些参数。</p>
<a id="more"></a>
<h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><p>经过查阅资料发现可以使用OKHttp的拦截器(<code>Interceptor</code>)实现。</p>
<h1 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h1><ul>
<li><p>新建一个<code>MyInterceptor</code>实现<code>Interceptor</code>接口；</p>
</li>
<li><p>重写<code>intercept</code>方法。</p>
</li>
</ul>
<h2 id="具体代码如下"><a href="#具体代码如下" class="headerlink" title="具体代码如下"></a>具体代码如下</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> Response <span class="title">intercept</span><span class="params">(Chain chain)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line"></div><div class="line">    Request request = chain.request();</div><div class="line">    RequestBody requestBody = request.body();</div><div class="line">    <span class="keyword">if</span> (request.method().equals(<span class="string">"GET"</span>)) &#123;</div><div class="line">        HttpUrl url = request.url();</div><div class="line"></div><div class="line">        Set&lt;String&gt; parameterNames = url.queryParameterNames();      <span class="comment">//</span></div><div class="line">        <span class="keyword">for</span> (String key : parameterNames) &#123;                          <span class="comment">//循环参数列表</span></div><div class="line">            <span class="keyword">if</span> (BuildConfig.DEBUG) Log.e(<span class="string">"MyInterceptor"</span>, key);      <span class="comment">// 如果要对已有的参数做进一步处理可以这样拿到参数</span></div><div class="line">        &#125;                                                            <span class="comment">//只添加的话 倒是没有必要</span></div><div class="line">        String sUrl = url.toString();</div><div class="line">        <span class="keyword">int</span> index = sUrl.indexOf(<span class="string">"?"</span>);</div><div class="line">        <span class="keyword">if</span> (index &gt; <span class="number">0</span>) &#123;</div><div class="line">            sUrl = sUrl + <span class="string">"所需参数拼接"</span>;    <span class="comment">//所需参数拼接 ==&gt;就是类似于 name=123&amp;version=12&amp;....这些</span></div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            sUrl = sUrl + <span class="string">"?"</span> + <span class="string">"所需参数拼接"</span>;</div><div class="line">        &#125;</div><div class="line">        request = request.newBuilder().url(sUrl).build();   <span class="comment">//重新构建</span></div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (request.method().equals(<span class="string">"POST"</span>)) &#123;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (requestBody <span class="keyword">instanceof</span> FormBody) &#123;</div><div class="line">            FormBody.Builder builder = <span class="keyword">new</span> FormBody.Builder();</div><div class="line">            FormBody formBody = (FormBody) requestBody;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; formBody.size(); i++) &#123;    <span class="comment">// 如果要对已有的参数做进一步处理可以这样拿到参数</span></div><div class="line">                Log.e(<span class="string">"MyInterceptor"</span>, <span class="string">"encodedNames:"</span> + formBody.encodedName(i) + <span class="string">" encodedValues:"</span> + formBody.encodedValue(i));</div><div class="line">                builder.addEncoded(formBody.encodedName(i), formBody.encodedValue(i));</div><div class="line">            &#125;</div><div class="line">            builder.addEncoded(<span class="string">"参数1"</span>, <span class="string">"值1"</span>);  <span class="comment">//添加公共参数</span></div><div class="line">            builder.addEncoded(<span class="string">"参数2"</span>, <span class="string">"值2"</span>);</div><div class="line">            builder.addEncoded(<span class="string">"参数3"</span>, <span class="string">"值3"</span>);</div><div class="line">            request = request.newBuilder().post(builder.build()).build();  <span class="comment">//重新构建</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> chain.proceed(request);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>在OKHttp或Retrofit中使用</li>
</ul>
<p>两者是一样的都是通过OKHttp来添加，如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">OkHttpClient okHttpClient = <span class="keyword">new</span> OkHttpClient.Builder()</div><div class="line">        .addInterceptor(<span class="keyword">new</span> MyInterceptor())   <span class="comment">//使用拦截器</span></div><div class="line">        .connectTimeout(<span class="number">15</span>, TimeUnit.SECONDS).build();</div><div class="line">Retrofit retrofit = <span class="keyword">new</span> Retrofit.Builder()</div><div class="line">        .client(okHttpClient)</div><div class="line">        .baseUrl(<span class="string">"http://192.168.1.59:8080/"</span>)</div><div class="line">        .addConverterFactory(GsonConverterFactory.create())</div><div class="line">        .build();</div><div class="line">networkService = retrofit.create(NetworkService.class);</div></pre></td></tr></table></figure>
<p>如上所示，就完成了普通的GET和POST方式使用时对所有的接口统一添加公共接口。</p>
<h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>本人最初是为了在访问后台接口的时候对所有的参数进行统一的加密，前后端使用同样的加密算法以及秘钥，但是在具体使用过程中如何传送秘钥，以及如何保证秘钥的传递安全以及加密算法的安全是需要重点考量的。<br>通过拦截器可以做很多事情，例如缓存等。</p>
<p>参考文章：</p>
<p><a href="http://www.jianshu.com/p/2710ed1e6b48" target="_blank" rel="external">http://www.jianshu.com/p/2710ed1e6b48</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;使用场景&quot;&gt;&lt;a href=&quot;#使用场景&quot; class=&quot;headerlink&quot; title=&quot;使用场景&quot;&gt;&lt;/a&gt;使用场景&lt;/h1&gt;&lt;p&gt;在实际的开发中，有时候后台需要在每个接口中带有一些公共的参数，比如当前APP的版本、访问时间、或者一些约定的秘钥等等，当然我们可以在每个接口中都添加这样的参数就可以了，但是那样做对一个程序员来说肯定不够优雅，所以就想怎么在接口请求的时候统一的对所有的接口加上这些参数。&lt;/p&gt;
    
    </summary>
    
      <category term="android技术" scheme="https://maintel.github.io/categories/android%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Refrofit" scheme="https://maintel.github.io/tags/Refrofit/"/>
    
  </entry>
  
  <entry>
    <title>NKD中使用第三方SO</title>
    <link href="https://maintel.github.io//blog/2017/01/NKD%E4%B8%AD%E4%BD%BF%E7%94%A8%E7%AC%AC%E4%B8%89%E6%96%B9SO.html"/>
    <id>https://maintel.github.io//blog/2017/01/NKD中使用第三方SO.html</id>
    <published>2017-01-17T08:05:26.000Z</published>
    <updated>2018-03-13T14:46:37.021Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>在<code>Android</code>开发中有时会遇到使用<code>JNI</code>调用<code>C/C++</code>函数库的场景。一般这个时候都是使用<code>NDK</code>将<code>C/C++</code>源代码编译出<code>so</code>文件，然后进行调用。但是有时候会遇到另外的情况：</p>
<a id="more"></a>
<pre><code>我们在NDK项目中还要再引入其他第三方的SO库
</code></pre><p>这个时候该怎么编译呢？</p>
<pre><code>通过使用动态函数库的调用方法，直接包含其头文件，便可以直接调用库中的类和方法。
</code></pre><p>具体使用过程可以分为两步：</p>
<ul>
<li><p>编写JNI文件包含第三方库的头文件。</p>
</li>
<li><p>编写MK文件引入预编译库（即第三方库）。</p>
</li>
</ul>
<h1 id="举个例子"><a href="#举个例子" class="headerlink" title="举个例子"></a>举个例子</h1><p>拿现在项目中遇到的一个具体情景：</p>
<p>现在手头有一个USB设备，公司要求实现在<code>windows</code>、<code>Android</code>、<code>Linux嵌入式</code>三平台通用的USB驱动库，然后各个平台只用做小量修改即可使用。经过评估决定使用git上的一个开源项目<a href="https://github.com/libusb/libusb" target="_blank" rel="external">libusb</a>来实现，当然可以直接使用源码来编译一个so出来，但是这样不够B格，而且实际使用过程中还要引入另外一个库文件，所以这里使用上面说的方式来调用，如下。</p>
<h1 id="编写JNI文件"><a href="#编写JNI文件" class="headerlink" title="编写JNI文件"></a>编写JNI文件</h1><p>在要编写的源文件目录下新建<code>include</code>文件夹(其实这个随便)，将要使用的函数所在的头文件放入其中，如：libusb.h。</p>
<p>在我们的源码中包含这个头文件</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"include/libusb.h"</span></span></div></pre></td></tr></table></figure>
<p>然后直接在需要使用的位置调用相应的函数即可：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function">JNIEXPORT <span class="keyword">void</span> JNICALL <span class="title">Java_com_yannan_usbtest_UsbTest_libUsbInit</span></span></div><div class="line">        <span class="params">(JNIEnv *env, jclass jobj)</span> &#123;</div><div class="line">    <span class="keyword">if</span> (libusb_init(<span class="literal">NULL</span>) &lt; <span class="number">0</span>)</div><div class="line">	&#123;</div><div class="line">		LOGD(<span class="string">"VeinSensorBase::Open(): libusb_init() &lt;0\n"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="编译MK文件"><a href="#编译MK文件" class="headerlink" title="编译MK文件"></a>编译MK文件</h1><p>首先将第三方库作为预编译引入</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">LOCAL_PATH := $(call my-dir)  </div><div class="line"></div><div class="line">include $(CLEAR_VARS)  </div><div class="line">LOCAL_MODULE := usb_pre   </div><div class="line">LOCAL_SRC_FILES := usb/libusb-1.0.so           </div><div class="line">include $(PREBUILT_SHARED_LIBRARY)</div><div class="line"></div><div class="line"></div><div class="line">include $(CLEAR_VARS)  </div><div class="line">LOCAL_MODULE    := test </div><div class="line">LOCAL_SRC_FILES := usb_test.c</div><div class="line">LOCAL_SHARED_LIBRARIES := usb_pre</div><div class="line">LOCAL_LDLIBS := -llog  </div><div class="line">include $(BUILD_SHARED_LIBRARY)</div></pre></td></tr></table></figure>
<p>其中：</p>
<ul>
<li><p><code>LOCAL_MODULE := usb_pre</code> 给这个第三方库取一个名字，不需要与原来的名字相同</p>
</li>
<li><p><code>LOCAL_SRC_FILES := usb/libusb-1.0.so</code> 表示这个库的路径，是在MK文件的目录下的<code>usb</code>目录中</p>
</li>
<li><p><code>PREBUILT_SHARED_LIBRARY</code> 表示这是一个共享库，即so库。</p>
</li>
<li><p><code>LOCAL_SHARED_LIBRARIES := usb_pre</code> 这一步则表示此模块依赖于上面命名的预编译库。</p>
</li>
</ul>
<p>然后执行<code>ndk-build</code>编译即可，此时在libs文件夹中会生成两个so文件，分别为<code>libtest.so</code>和<code>libusb-1.0.so</code>,都拷贝到项目中就可以了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;p&gt;在&lt;code&gt;Android&lt;/code&gt;开发中有时会遇到使用&lt;code&gt;JNI&lt;/code&gt;调用&lt;code&gt;C/C++&lt;/code&gt;函数库的场景。一般这个时候都是使用&lt;code&gt;NDK&lt;/code&gt;将&lt;code&gt;C/C++&lt;/code&gt;源代码编译出&lt;code&gt;so&lt;/code&gt;文件，然后进行调用。但是有时候会遇到另外的情况：&lt;/p&gt;
    
    </summary>
    
      <category term="android技术" scheme="https://maintel.github.io/categories/android%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="JNI" scheme="https://maintel.github.io/tags/JNI/"/>
    
      <category term="NKD" scheme="https://maintel.github.io/tags/NKD/"/>
    
  </entry>
  
  <entry>
    <title>小心JNI中的内存泄露</title>
    <link href="https://maintel.github.io//blog/2017/01/%E5%B0%8F%E5%BF%83JNI%E4%B8%AD%E7%9A%84%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2.html"/>
    <id>https://maintel.github.io//blog/2017/01/小心JNI中的内存泄露.html</id>
    <published>2017-01-12T09:28:55.000Z</published>
    <updated>2018-03-13T14:46:37.020Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Jni频繁资源未释放引起的崩溃问题</title>
    <link href="https://maintel.github.io//blog/2017/01/Jni%E9%A2%91%E7%B9%81%E8%B5%84%E6%BA%90%E6%9C%AA%E9%87%8A%E6%94%BE%E5%BC%95%E8%B5%B7%E7%9A%84%E5%B4%A9%E6%BA%83%E9%97%AE%E9%A2%98.html"/>
    <id>https://maintel.github.io//blog/2017/01/Jni频繁资源未释放引起的崩溃问题.html</id>
    <published>2017-01-10T15:17:08.000Z</published>
    <updated>2018-03-13T14:46:37.019Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Failed-adding-to-JNI-pinned-array-ref-table-1024-entries"><a href="#Failed-adding-to-JNI-pinned-array-ref-table-1024-entries" class="headerlink" title="Failed adding to JNI pinned array ref table (1024 entries)"></a>Failed adding to JNI pinned array ref table (1024 entries)</h1><p><strong>问题重现:</strong></p>
<p>在开发蓝牙模块升级的时候， 由于要传送的升级文件较大，所以需要频繁的通过JNI调用C语言来组装报文，结果在低版本手机测试时遇到<code>Failed adding to JNI pinned array ref table (1024 entries)</code>.</p>
<a id="more"></a>
<p><strong>错误代码：</strong></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function">JNIEXPORT jbyteArray JNICALL <span class="title">xxx_BleUtils_sendUpdatePkt</span><span class="params">(</span></span></div><div class="line">        JNIEnv *env, jclass jobj, jbyteArray pkt, jint pkt_sn, jint pktLen, jint token</div><div class="line">) &#123;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> outbuf[APPAPI_MAXSENDLEN / <span class="number">4</span>];</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> *pBuffer = (*env)-&gt;GetByteArrayElements(env, pkt, <span class="literal">NULL</span>);   <span class="comment">//&lt;==引起错误的地方</span></div><div class="line">    <span class="keyword">int</span> ret = ynLockSendPkt((<span class="keyword">uint16_t</span>) token, (<span class="keyword">uint16_t</span>) pkt_sn, pktLen,</div><div class="line">                            pBuffer,</div><div class="line">                            (<span class="keyword">char</span> *) outbuf,</div><div class="line">                            APPAPI_MAXSENDLEN);</div><div class="line">    jbyteArray <span class="built_in">array</span> = (*env)-&gt;NewByteArray(env, ret);</div><div class="line">    (*env)-&gt;SetByteArrayRegion(env, <span class="built_in">array</span>, <span class="number">0</span>, ret, outbuf);</div><div class="line">    <span class="keyword">return</span> <span class="built_in">array</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>原因：</strong></p>
<p>运行 native method 的线程的堆栈记录着 Local Reference 表的内存位置（指针 p），Local Reference表中存放JNI Local Reference实现 Local Reference 到 Java 对象的映射，函数中调用的<code>GetByteArrayElements()</code>会使Local Reference表中的存放的指针加一，频繁的调用而得不到释放的话表中的值就会一直增加，直至内存被占满引起崩溃。</p>
<p><strong>解决方法：</strong></p>
<p>在函数中<code>return</code>前释放资源：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(*env)-&gt;ReleaseByteArrayElements(env,pkt, pBuffer, <span class="number">0</span>); <span class="comment">//pkt为java层传递过来的数组，pBuffer为指针</span></div></pre></td></tr></table></figure>
<p>由于是在JNI层发生的错误，而且项目只是集成了bugly在Java层面的错误收集，所以一直找不到崩溃原因，最后不得不找了同型号的手机来测试几遍才发现问题,看来BUG收集也要尽善尽美才行啊，不能偷懒。</p>
<p>只在低配手机出现没有在高配手机出现的原因应该是高配手机分配的内存更大。但是这里的内存只要不被释放，当以后升级包更大的时候总有一天高配手机也会出现问题的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Failed-adding-to-JNI-pinned-array-ref-table-1024-entries&quot;&gt;&lt;a href=&quot;#Failed-adding-to-JNI-pinned-array-ref-table-1024-entries&quot; class=&quot;headerlink&quot; title=&quot;Failed adding to JNI pinned array ref table (1024 entries)&quot;&gt;&lt;/a&gt;Failed adding to JNI pinned array ref table (1024 entries)&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;问题重现:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在开发蓝牙模块升级的时候， 由于要传送的升级文件较大，所以需要频繁的通过JNI调用C语言来组装报文，结果在低版本手机测试时遇到&lt;code&gt;Failed adding to JNI pinned array ref table (1024 entries)&lt;/code&gt;.&lt;/p&gt;
    
    </summary>
    
      <category term="android技术" scheme="https://maintel.github.io/categories/android%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="JNI" scheme="https://maintel.github.io/tags/JNI/"/>
    
  </entry>
  
  <entry>
    <title>synchronized关键字的使用</title>
    <link href="https://maintel.github.io//blog/2017/01/synchronized%E5%85%B3%E9%94%AE%E5%AD%97%E7%9A%84%E4%BD%BF%E7%94%A8.html"/>
    <id>https://maintel.github.io//blog/2017/01/synchronized关键字的使用.html</id>
    <published>2017-01-06T09:01:21.000Z</published>
    <updated>2018-03-13T14:46:37.018Z</updated>
    
    <content type="html"><![CDATA[<p><strong>主要讲<code>synchronized</code>关键字的用法和不同之处</strong></p>
<a id="more"></a> 
<h1 id="开启多线程"><a href="#开启多线程" class="headerlink" title="开启多线程"></a>开启多线程</h1><p>有三个线程<code>ThreadTest1</code>、<code>ThreadTest2</code>、<code>ThreadTest3</code>:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest1</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</div><div class="line"></div><div class="line">    SynchronizedTest synchronizedTest;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ThreadTest1</span><span class="params">(SynchronizedTest synchronizedTest)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.synchronizedTest = synchronizedTest;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        synchronizedTest.test();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest2</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</div><div class="line"></div><div class="line">    SynchronizedTest synchronizedTest;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ThreadTest2</span><span class="params">(SynchronizedTest synchronizedTest)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.synchronizedTest = synchronizedTest;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        synchronizedTest.test();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest3</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</div><div class="line"></div><div class="line">    SynchronizedTest synchronizedTest;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ThreadTest3</span><span class="params">(SynchronizedTest synchronizedTest)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.synchronizedTest = synchronizedTest;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        synchronizedTest.test();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>调用一个对象：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SynchronizedTest</span> </span>&#123;</div><div class="line">    String anyString = <span class="string">""</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SynchronizedTest</span><span class="params">(String anyString)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.anyString = anyString;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            System.out.println(<span class="string">"线程名称为："</span> + Thread.currentThread().getName()</div><div class="line">                    + <span class="string">"在"</span> + System.currentTimeMillis() + <span class="string">"进入同步块"</span>);</div><div class="line">            Thread.sleep(<span class="number">3000</span>);</div><div class="line">            System.out.println(<span class="string">"线程名称为："</span> + Thread.currentThread().getName()</div><div class="line">                    + <span class="string">"在"</span> + System.currentTimeMillis() + <span class="string">"离开同步块"</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>启动线程：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">threadStart</span><span class="params">()</span> </span>&#123;</div><div class="line">       SynchronizedTest synchronizedTest = <span class="keyword">new</span> SynchronizedTest(<span class="string">"maintel"</span>);</div><div class="line">       ThreadTest1 threadTest1 = <span class="keyword">new</span> ThreadTest1(synchronizedTest);</div><div class="line">       threadTest1.setName(<span class="string">"thread1"</span>);</div><div class="line">       threadTest1.start();</div><div class="line">       ThreadTest2 threadTest2 = <span class="keyword">new</span> ThreadTest2(synchronizedTest);</div><div class="line">       threadTest2.setName(<span class="string">"thread2"</span>);</div><div class="line">       threadTest2.start();</div><div class="line">       ThreadTest3 threadTest3 = <span class="keyword">new</span> ThreadTest3(synchronizedTest);</div><div class="line">       threadTest3.setName(<span class="string">"thread3"</span>);</div><div class="line">       threadTest3.start();</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<h1 id="先看看非安全线程的实例"><a href="#先看看非安全线程的实例" class="headerlink" title="先看看非安全线程的实例"></a>先看看非安全线程的实例</h1><p>即上面代码的输出：</p>
<pre><code>I/System.out: 线程名称为：thread1在1490859330653进入同步块
I/System.out: 线程名称为：thread2在1490859330654进入同步块
I/System.out: 线程名称为：thread3在1490859330657进入同步块
I/System.out: 线程名称为：thread1在1490859333654离开同步块
I/System.out: 线程名称为：thread2在1490859333654离开同步块
I/System.out: 线程名称为：thread3在1490859333657离开同步块
</code></pre><p>可以看到方法同时被调用，是线程不安全的。</p>
<h1 id="使用synchronized关键字修饰方法"><a href="#使用synchronized关键字修饰方法" class="headerlink" title="使用synchronized关键字修饰方法"></a>使用<code>synchronized</code>关键字修饰方法</h1><p>修改如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">synchronized</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;   <span class="comment">//  &lt;&lt;========</span></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            System.out.println(<span class="string">"线程名称为："</span> + Thread.currentThread().getName()</div><div class="line">                    + <span class="string">"在"</span> + System.currentTimeMillis() + <span class="string">"进入同步块"</span>);</div><div class="line">            Thread.sleep(<span class="number">3000</span>);</div><div class="line">            System.out.println(<span class="string">"线程名称为："</span> + Thread.currentThread().getName()</div><div class="line">                    + <span class="string">"在"</span> + System.currentTimeMillis() + <span class="string">"离开同步块"</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>再看看输入：</p>
<pre><code>I/System.out: 线程名称为：thread1在1490859832827进入同步块
I/System.out: 线程名称为：thread1在1490859835827离开同步块
I/System.out: 线程名称为：thread3在1490859835828进入同步块
I/System.out: 线程名称为：thread3在1490859838828离开同步块
I/System.out: 线程名称为：thread2在1490859838828进入同步块
I/System.out: 线程名称为：thread2在1490859841829离开同步块
</code></pre><p>可以看到线程顺序执行，当一个线程执行完毕下一个线程才会进入，因此是线程安全的。</p>
<p>这里获取的锁是SynchronizedTest的对象实例的锁—对象锁。</p>
<h1 id="多个对象多个锁"><a href="#多个对象多个锁" class="headerlink" title="多个对象多个锁"></a>多个对象多个锁</h1><p><code>threadTest()</code>方法修改如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">threadStart</span><span class="params">()</span> </span>&#123;</div><div class="line">        SynchronizedTest synchronizedTest = <span class="keyword">new</span> SynchronizedTest(<span class="string">"maintel"</span>);</div><div class="line">        SynchronizedTest synchronizedTest2 = <span class="keyword">new</span> SynchronizedTest(<span class="string">"maintel2"</span>);  <span class="comment">//&lt;&lt;==========</span></div><div class="line">        ThreadTest1 threadTest1 = <span class="keyword">new</span> ThreadTest1(synchronizedTest);</div><div class="line">        threadTest1.setName(<span class="string">"thread1"</span>);</div><div class="line">        threadTest1.start();</div><div class="line">        ThreadTest2 threadTest2 = <span class="keyword">new</span> ThreadTest2(synchronizedTest2);            <span class="comment">//&lt;&lt;=============</span></div><div class="line">        threadTest2.setName(<span class="string">"thread2"</span>);</div><div class="line">        threadTest2.start();</div><div class="line">        ThreadTest3 threadTest3 = <span class="keyword">new</span> ThreadTest3(synchronizedTest);</div><div class="line">        threadTest3.setName(<span class="string">"thread3"</span>);</div><div class="line">        threadTest3.start();</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>输出：</p>
<pre><code>I/System.out: 线程名称为：thread2在1490860191946进入同步块
I/System.out: 线程名称为：thread1在1490860191950进入同步块
I/System.out: 线程名称为：thread2在1490860194947离开同步块
I/System.out: 线程名称为：thread1在1490860194957离开同步块
I/System.out: 线程名称为：thread3在1490860194957进入同步块
I/System.out: 线程名称为：thread3在1490860197958离开同步块
</code></pre><p>可以看到线程2和线程1同时进入方法，因为<code>thread1</code>和<code>thread3</code>获取的是<code>synchronizedTest</code>的对象锁，而<code>thread2</code>获取的是<code>synchronizedTest2</code>的对象锁，两者不存在同步问题。</p>
<h1 id="同步块synchronized-this"><a href="#同步块synchronized-this" class="headerlink" title="同步块synchronized (this)"></a>同步块<code>synchronized (this)</code></h1><p>将<code>test()</code>方法修改如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;     <span class="comment">//&lt;&lt;==========</span></div><div class="line">                System.out.println(<span class="string">"线程名称为："</span> + Thread.currentThread().getName()</div><div class="line">                        + <span class="string">"在"</span> + System.currentTimeMillis() + <span class="string">"进入同步块"</span>);</div><div class="line">                Thread.sleep(<span class="number">3000</span>);</div><div class="line">                System.out.println(<span class="string">"线程名称为："</span> + Thread.currentThread().getName()</div><div class="line">                        + <span class="string">"在"</span> + System.currentTimeMillis() + <span class="string">"离开同步块"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>输入为：</p>
<pre><code>I/System.out: 线程名称为：thread1在1490860807697进入同步块
I/System.out: 线程名称为：thread1在1490860810698离开同步块
I/System.out: 线程名称为：thread2在1490860810699进入同步块
I/System.out: 线程名称为：thread2在1490860813699离开同步块
I/System.out: 线程名称为：thread3在1490860813700进入同步块
I/System.out: 线程名称为：thread3在1490860816700离开同步块
</code></pre><p>可以看到同样是同步执行的，这里线程获取的是<code>synchronized (this)</code>括号中的对象锁，这里就是<code>synchronizedTest</code>的对象锁。</p>
<h1 id="同步块synchronized-非this对象"><a href="#同步块synchronized-非this对象" class="headerlink" title="同步块synchronized (非this对象)"></a>同步块<code>synchronized (非this对象)</code></h1><p>修改<code>test()</code>方法如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="keyword">synchronized</span> (anyString) &#123;    <span class="comment">//&lt;&lt;==================</span></div><div class="line">            System.out.println(<span class="string">"线程名称为："</span> + Thread.currentThread().getName()</div><div class="line">                    + <span class="string">"在"</span> + System.currentTimeMillis() + <span class="string">"进入同步块"</span>);</div><div class="line">            Thread.sleep(<span class="number">3000</span>);</div><div class="line">            System.out.println(<span class="string">"线程名称为："</span> + Thread.currentThread().getName()</div><div class="line">                    + <span class="string">"在"</span> + System.currentTimeMillis() + <span class="string">"离开同步块"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>输出：</p>
<pre><code>I/System.out: 线程名称为：thread1在1490861540167进入同步块
I/System.out: 线程名称为：thread1在1490861543168离开同步块
I/System.out: 线程名称为：thread2在1490861543168进入同步块
I/System.out: 线程名称为：thread2在1490861546169离开同步块
I/System.out: 线程名称为：thread3在1490861546169进入同步块
I/System.out: 线程名称为：thread3在1490861549169离开同步块
</code></pre><p>可以看到同样是同步执行的，这里线程获取的是<code>synchronized (anyString)</code>括号中的对象锁，这里就是<code>anyString</code>的对象锁。</p>
<h1 id="类中存在两个不同的同步方法会怎么样？"><a href="#类中存在两个不同的同步方法会怎么样？" class="headerlink" title="类中存在两个不同的同步方法会怎么样？"></a>类中存在两个不同的同步方法会怎么样？</h1><p>增加一个方法<code>test2()</code>:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">synchronized</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            System.out.println(<span class="string">"test2  线程名称为："</span> + Thread.currentThread().getName()</div><div class="line">                    + <span class="string">"在"</span> + System.currentTimeMillis() + <span class="string">"进入同步块"</span>);</div><div class="line">            Thread.sleep(<span class="number">3000</span>);</div><div class="line">            System.out.println(<span class="string">"test2  线程名称为："</span> + Thread.currentThread().getName()</div><div class="line">                    + <span class="string">"在"</span> + System.currentTimeMillis() + <span class="string">"离开同步块"</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>修改线程2为：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">    synchronizedTest.test2();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>此时运行输出为：</p>
<pre><code>I/System.out: test2  线程名称为：thread2在1490862104089进入同步块
I/System.out: 线程名称为：thread3在1490862104091进入同步块
I/System.out: test2  线程名称为：thread2在1490862107090离开同步块
I/System.out: 线程名称为：thread3在1490862107092离开同步块
I/System.out: 线程名称为：thread1在1490862107092进入同步块
I/System.out: 线程名称为：thread1在1490862110092离开同步块
</code></pre><p>可以看到线程1和3是顺序执行的，线程2却是同时执行的，因为上面<code>test2()</code>方法被修饰以后，线程2获取到对象锁是<code>synchronizedTest</code>的，而线程1和3调用的是<code>test()</code>方法，获取到的是<code>anyString</code>的对象锁，两者并不冲突。</p>
<h1 id="同步块synchronized-xxx-class"><a href="#同步块synchronized-xxx-class" class="headerlink" title="同步块synchronized (xxx.class)"></a>同步块<code>synchronized (xxx.class)</code></h1><p><code>SynchronizedTest</code>中<code>test()</code>和<code>test2()</code>方法分别如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;                    <span class="comment">//&lt;&lt;=============</span></div><div class="line">            System.out.println(<span class="string">"线程名称为："</span> + Thread.currentThread().getName()</div><div class="line">                    + <span class="string">"在"</span> + System.currentTimeMillis() + <span class="string">"进入同步块"</span>);</div><div class="line">            Thread.sleep(<span class="number">3000</span>);</div><div class="line">            System.out.println(<span class="string">"线程名称为："</span> + Thread.currentThread().getName()</div><div class="line">                    + <span class="string">"在"</span> + System.currentTimeMillis() + <span class="string">"离开同步块"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="keyword">synchronized</span> (SynchronizedTest.class) &#123;   <span class="comment">//&lt;&lt;==============</span></div><div class="line">            System.out.println(<span class="string">"test2  线程名称为："</span> + Thread.currentThread().getName()</div><div class="line">                    + <span class="string">"在"</span> + System.currentTimeMillis() + <span class="string">"进入同步块"</span>);</div><div class="line">            Thread.sleep(<span class="number">3000</span>);</div><div class="line">            System.out.println(<span class="string">"test2  线程名称为："</span> + Thread.currentThread().getName()</div><div class="line">                    + <span class="string">"在"</span> + System.currentTimeMillis() + <span class="string">"离开同步块"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>此时线程2调用<code>test2()</code>方法，线程1和3调用<code>test()</code>方法，来看看输出如下：</p>
<pre><code>I/System.out: test2  线程名称为：thread2在1490867370183进入同步块
I/System.out: 线程名称为：thread1在1490867370184进入同步块
I/System.out: test2  线程名称为：thread2在1490867373184离开同步块
I/System.out: 线程名称为：thread1在1490867373185离开同步块
I/System.out: 线程名称为：thread3在1490867373185进入同步块
I/System.out: 线程名称为：thread3在1490867376185离开同步块
</code></pre><p>可以看到1和3顺序执行，2却同时执行了，为什么呢？原因在于：</p>
<p><strong>直接xxx.class锁是属于直接类的，而this是属于对象锁</strong></p>
<p>这里关系到JVM虚拟机的一些机制，以后再做讨论。</p>
<h1 id="对静态方法使用锁和普通锁的不同之处"><a href="#对静态方法使用锁和普通锁的不同之处" class="headerlink" title="对静态方法使用锁和普通锁的不同之处"></a>对静态方法使用锁和普通锁的不同之处</h1><p><code>SynchronizedTest</code>中<code>test()</code>和<code>test2()</code>方法分别如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">synchronized</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">            System.out.println(<span class="string">"线程名称为："</span> + Thread.currentThread().getName()</div><div class="line">                    + <span class="string">"在"</span> + System.currentTimeMillis() + <span class="string">"进入同步块"</span>);</div><div class="line">            Thread.sleep(<span class="number">3000</span>);</div><div class="line">            System.out.println(<span class="string">"线程名称为："</span> + Thread.currentThread().getName()</div><div class="line">                    + <span class="string">"在"</span> + System.currentTimeMillis() + <span class="string">"离开同步块"</span>);</div><div class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">synchronized</span> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        System.out.println(<span class="string">"test2  线程名称为："</span> + Thread.currentThread().getName()</div><div class="line">                + <span class="string">"在"</span> + System.currentTimeMillis() + <span class="string">"进入同步块"</span>);</div><div class="line">        Thread.sleep(<span class="number">3000</span>);</div><div class="line">        System.out.println(<span class="string">"test2  线程名称为："</span> + Thread.currentThread().getName()</div><div class="line">                + <span class="string">"在"</span> + System.currentTimeMillis() + <span class="string">"离开同步块"</span>);</div><div class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>同样线程2调用<code>test2()</code>方法，线程1和3调用<code>test()</code>方法，来看看输出如下：</p>
<pre><code>I/System.out: test2  线程名称为：thread2在1490866857936进入同步块
I/System.out: 线程名称为：thread3在1490866857938进入同步块
I/System.out: test2  线程名称为：thread2在1490866860936离开同步块
I/System.out: 线程名称为：thread3在1490866860939离开同步块
I/System.out: 线程名称为：thread1在1490866860939进入同步块
I/System.out: 线程名称为：thread1在1490866863939离开同步块
</code></pre><p>可以看到1和3线程顺序执行，线程2却同时执行了，这里就是锁普通方法和静态方法的区别，如同上面使用直接类和对象的区别：</p>
<p><strong>静态方法的锁和xxx.class锁是一样的直接属于类</strong></p>
<p>到此结束，自己学习使用过程中的一些练习和理解，不对之处还请指出。还有一些更深入的关于获取锁对象的机制等问题，以后再做研究。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;主要讲&lt;code&gt;synchronized&lt;/code&gt;关键字的用法和不同之处&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="android技术" scheme="https://maintel.github.io/categories/android%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="多线程" scheme="https://maintel.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>android单元测试遇到的问题</title>
    <link href="https://maintel.github.io//blog/2016/12/android%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98.html"/>
    <id>https://maintel.github.io//blog/2016/12/android单元测试遇到的问题.html</id>
    <published>2016-12-29T09:16:42.000Z</published>
    <updated>2018-03-13T14:46:37.040Z</updated>
    
    <content type="html"><![CDATA[<p>本篇主要记录在学习<code>android单元测试</code>的过程中遇到的一些问题和解决方法，以后遇到的时候能够随时翻阅。</p>
<a id="more"></a>
<h2 id="Junit-出现的问题Empty-test-suite"><a href="#Junit-出现的问题Empty-test-suite" class="headerlink" title="Junit 出现的问题Empty test suite"></a><code>Junit</code> 出现的问题<code>Empty test suite</code></h2><p>运行单元测试<strong>出现<code>Class not found: &quot;package.ExampleUnitTest&quot;Empty test suite.</code>错误</strong></p>
<p>项目运行了但实际上并没有建立单元测试，即使配置了<code>Junit</code>,此时，首先<code>Build</code>-&gt;<code>Make Project</code>然后再运行测试就可以了；<a href="https://code.google.com/p/android/issues/detail?id=230688" target="_blank" rel="external">参考</a>：</p>
<blockquote>
<p>It seems the Run action doesn’t actually build unit tests even though you have a JUnit configuration selected. First running “Make project” and then “Run” will work fine.</p>
</blockquote>
<hr>
<p>更新</p>
<p>使用 JUnit 4.12 报错 <code>NoClassDefFoundError: org/hamcrest/SelfDescribing</code></p>
<p>缺少 hamcrest 包。</p>
<blockquote>
<p>junit.jar: Includes the Hamcrest classes. The simple all-in-one solution to get started quickly.Starting with version 4.11, Hamcrest is no longer included in this jar.</p>
</blockquote>
<p>JUint 需要依赖 hamcret 包，但是4.11后没有这个包了，需要手动添加。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇主要记录在学习&lt;code&gt;android单元测试&lt;/code&gt;的过程中遇到的一些问题和解决方法，以后遇到的时候能够随时翻阅。&lt;/p&gt;
    
    </summary>
    
      <category term="android技术" scheme="https://maintel.github.io/categories/android%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="android单元测试" scheme="https://maintel.github.io/tags/android%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Restful初见</title>
    <link href="https://maintel.github.io//blog/2016/12/Restful%E5%88%9D%E8%A7%81.html"/>
    <id>https://maintel.github.io//blog/2016/12/Restful初见.html</id>
    <published>2016-12-21T02:30:27.000Z</published>
    <updated>2018-03-13T14:46:37.039Z</updated>
    
    <content type="html"><![CDATA[<p>Rest 指一组架构约束条件和原则，满足这些约束条件和原则的应用程序或者设计都被称为RestFul</p>
<p>Restful 更符合Http的设计规范，使用了HTTP标准方法：</p>
<ul>
<li>HEAD    只获取某个资源的头部信息。比如只想了解某个文件的大小，某个资源的修改日期等</li>
<li>GET    获取资源</li>
<li>POST    创建资源</li>
<li>PATCH    更新资源的部分属性。因为 PATCH 比较新，而且规范比较复杂，所以真正实现的比较少，一般都是用 POST 替代</li>
<li>PUT    替换资源，客户端需要提供新建资源的所有属性。如果新内容为空，要设置 Content-Length 为 0，以区别错误信息</li>
<li>DELETE    删除资源</li>
</ul>
<p>所有的操作都是针对资源的</p>
<p>资源又是什么？</p>
<p>服务程序状态和功能都能被称为资源。是一个概念实体，它向客户端公开。资源的例子有：应用程序对象、数据库记录、算法等等。每个资源都使用 URI (Universal Resource Identifier) 得到一个唯一的地址。所有资源都共享统一的接口，以便在客户端和服务器之间传输状态。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Rest 指一组架构约束条件和原则，满足这些约束条件和原则的应用程序或者设计都被称为RestFul&lt;/p&gt;
&lt;p&gt;Restful 更符合Http的设计规范，使用了HTTP标准方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HEAD    只获取某个资源的头部信息。比如只想了解某个文件的大
    
    </summary>
    
      <category term="Http" scheme="https://maintel.github.io/categories/Http/"/>
    
    
      <category term="Restful" scheme="https://maintel.github.io/tags/Restful/"/>
    
  </entry>
  
  <entry>
    <title>使用Hexo+GitHub Pages搭建个人博客(3)-标签与分类</title>
    <link href="https://maintel.github.io//blog/2016/12/%E4%BD%BF%E7%94%A8Hexo-GitHubPages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2-3.html"/>
    <id>https://maintel.github.io//blog/2016/12/使用Hexo-GitHubPages搭建个人博客-3.html</id>
    <published>2016-12-20T08:30:10.000Z</published>
    <updated>2018-03-13T14:46:37.038Z</updated>
    
    <content type="html"><![CDATA[<p>本篇文章主要分享 hexo 中关于分类和标签的使用技巧</p>
<a id="more"></a>
<h1 id="自动添加分类标签"><a href="#自动添加分类标签" class="headerlink" title="自动添加分类标签"></a>自动添加分类标签</h1><p>通过 <code>hexo new xxx</code> 来创建一个页面，在 source/_posts 目录下找到新建的 xxx.md 文件，打开以后看到默认的内容：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">title: xxx</div><div class="line">date: 2017-05-01 16:30:10</div><div class="line">tags: </div><div class="line">---</div></pre></td></tr></table></figure>
<p>可以编辑标题、日期、标签、和内容，但是没有分类选项，我们可以手动的添加 <code>categories:</code> 来添加分类，但是每次都这样添加岂不是不够优雅，因此可以这样，找到 scaffolds/post.md 文件，打开以后发现:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">title: &#123;&#123; title &#125;&#125;</div><div class="line">date: &#123;&#123; date &#125;&#125;</div><div class="line">tags:</div><div class="line">---</div></pre></td></tr></table></figure>
<p>这不就是默认的新建内容么，我们在里面添加 <code>categories:</code> ，这样以后新建的文章都会自动添加上  <code>categories:</code> 标签了。</p>
<h1 id="设置标签"><a href="#设置标签" class="headerlink" title="设置标签"></a>设置标签</h1><p>这里主要是说明一下如果有多个标签的时候如何设置，可以如下</p>
<p>方法一：</p>
<blockquote>
<p>tages: [标签1,标签2,…标签n]</p>
</blockquote>
<p>方法二：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">tags: </div><div class="line">- gradle</div><div class="line">- 自动化</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇文章主要分享 hexo 中关于分类和标签的使用技巧&lt;/p&gt;
    
    </summary>
    
      <category term="hexo" scheme="https://maintel.github.io/categories/hexo/"/>
    
    
      <category term="hexo" scheme="https://maintel.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>使用Hexo+GitHub Pages搭建个人博客2</title>
    <link href="https://maintel.github.io//blog/2016/12/hexo%E4%BD%BF%E7%94%A8%E8%BF%87%E7%A8%8B%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98.html"/>
    <id>https://maintel.github.io//blog/2016/12/hexo使用过程中的一些问题.html</id>
    <published>2016-12-17T08:44:48.000Z</published>
    <updated>2018-03-13T14:46:37.037Z</updated>
    
    <content type="html"><![CDATA[<p>本篇主要记录在使用Hexo部署博客过程主题设置，以及一些技巧等。</p>
<a id="more"></a>
<h1 id="主题设置"><a href="#主题设置" class="headerlink" title="主题设置"></a>主题设置</h1><p>本博客使用的是<code>next</code>主题，希望详细了解的同学可以参看<a href="http://theme-next.iissnan.com/" target="_blank" rel="external">next官方网站</a>。</p>
<h2 id="下载主题"><a href="#下载主题" class="headerlink" title="下载主题"></a>下载主题</h2><p>在博客源码根目录下执行：</p>
<blockquote>
<p>git clone <a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="external">https://github.com/iissnan/hexo-theme-next</a> themes/next</p>
</blockquote>
<h2 id="应用主题"><a href="#应用主题" class="headerlink" title="应用主题"></a>应用主题</h2><p>在根目录下找到<code>_config.yml</code>配置文件，找到<code>theme</code>字段，并将其值更改为<code>next</code>，如下所示：</p>
<blockquote>
<p>theme: next</p>
</blockquote>
<h2 id="设置RSS"><a href="#设置RSS" class="headerlink" title="设置RSS"></a>设置RSS</h2><p>进入<code>themes</code>-<code>next</code>文件夹，找到<code>_config.yml</code>配置文件，在里面添加：</p>
<blockquote>
<p>rss:</p>
</blockquote>
<h2 id="添加标签tags页面"><a href="#添加标签tags页面" class="headerlink" title="添加标签tags页面"></a>添加标签tags页面</h2><p>使用命令行定位到根目录下，使用如下命令新建一个页面，命名为<code>tags</code>，布局格式为<code>page</code>：</p>
<blockquote>
<p>hexo new page tags</p>
</blockquote>
<p>执行完以后可以在根目录-<code>source</code>文件夹下找到<code>tags</code>的文件夹，里面有一个<code>index.md</code>文件，内容如下：</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">title: 标签</div><div class="line">date: 2017-03-19 17:24:25</div><div class="line">type: "tags"</div><div class="line"><span class="section">comments: false</span></div><div class="line">---</div></pre></td></tr></table></figure>
<p>如果想要关闭tags页面的评论可以设置<code>comments</code>为false。</p>
<p>以后新建博客的时候在头部就有<code>tags:</code>然后输入相应的标签，执行完<code>hexo g</code>命令后<code>tags</code>会自动更新。</p>
<h2 id="添加分类（categories）页面"><a href="#添加分类（categories）页面" class="headerlink" title="添加分类（categories）页面"></a>添加分类（categories）页面</h2><p>和上面一样在根目录下执行如下命令：</p>
<blockquote>
<p>hexo new page categories</p>
</blockquote>
<p>同样能够在<code>source</code>下找到<code>categories</code>文件夹，内容为：</p>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">---</span></div><div class="line"><span class="attr">title:</span> <span class="string">分类</span></div><div class="line"><span class="attr">date:</span> <span class="number">2017</span><span class="bullet">-03</span><span class="bullet">-19</span> <span class="number">17</span><span class="string">:25:42</span></div><div class="line"><span class="attr">type:</span> <span class="string">"categories"</span></div><div class="line"><span class="attr">comments:</span> <span class="literal">false</span></div><div class="line"><span class="meta">---</span></div></pre></td></tr></table></figure>
<h2 id="添加404页面"><a href="#添加404页面" class="headerlink" title="添加404页面"></a>添加404页面</h2><p>新建一个<code>404.html</code>文件，放在<code>themes\next\source</code>目录下。这个可以随便添加，本博客使用的是腾讯公益页面。</p>
<h2 id="展示摘要"><a href="#展示摘要" class="headerlink" title="展示摘要"></a>展示摘要</h2><p>如果一篇文章过长，那么在首页文章列表中会看到将全部内容展示出来，浏览的时候有很多不方便之处，<code>next</code>主题提供了自动摘录功能，在<code>themes\next</code>文件夹下找到<code>next</code>文件夹，然后配置</p>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="attr">auto_excerpt:</span></div><div class="line"><span class="attr">  enable:</span> <span class="literal">true</span></div><div class="line"><span class="attr">  length:</span> <span class="number">150</span></div></pre></td></tr></table></figure>
<p>长度可以自定，不过更推荐使用下面的方式：</p>
<p>在文章中添加 <code>&lt;!--more--&gt;</code>则在这之前的会被当做摘要展示。</p>
<h2 id="修改icon以及头像"><a href="#修改icon以及头像" class="headerlink" title="修改icon以及头像"></a>修改icon以及头像</h2><p>网站小图标名字叫<code>favicon.ico</code>,位置是在<code>source\favicon.ico</code>，自己制作一个替换即可。</p>
<p>个人头像名字叫<code>avatar.jpg</code>,位置在<code>themes\next\source\images\avatar.jpg</code>,同样替换即可。</p>
<p>还有更多的配置内容请参看<a href="http://theme-next.iissnan.com/" target="_blank" rel="external">next官网</a>。</p>
<p>这里附上本博客的配置:</p>
<p>_config.yml配置文件内容如下：</p>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Hexo Configuration</span></div><div class="line"><span class="comment">## Docs: https://hexo.io/docs/configuration.html</span></div><div class="line"><span class="comment">## Source: https://github.com/hexojs/hexo/</span></div><div class="line"></div><div class="line"><span class="comment"># Site</span></div><div class="line"><span class="attr">title:</span> <span class="string">Maintel-编程记</span></div><div class="line"><span class="attr">subtitle:</span></div><div class="line"><span class="attr">description:</span> <span class="string">IT</span> <span class="string">小工</span></div><div class="line"><span class="attr">author:</span> <span class="string">Maintel</span></div><div class="line"><span class="attr">language:</span> <span class="string">zh-Hans</span></div><div class="line"><span class="attr">timezone:</span> <span class="string">Asia/Shanghai</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># URL</span></div><div class="line"><span class="comment">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></div><div class="line"><span class="attr">url:</span> <span class="string">"https://maintel.github.io"</span></div><div class="line"><span class="attr">root:</span> <span class="string">/</span></div><div class="line"><span class="attr">permalink:</span> <span class="string">/blog/:year/:month/:title.html</span></div><div class="line"><span class="attr">permalink_defaults:</span></div><div class="line"></div><div class="line"><span class="comment"># Directory</span></div><div class="line"><span class="attr">source_dir:</span> <span class="string">source</span></div><div class="line"><span class="attr">public_dir:</span> <span class="string">public</span></div><div class="line"><span class="attr">tag_dir:</span> <span class="string">tags</span></div><div class="line"><span class="attr">archive_dir:</span> <span class="string">archives</span></div><div class="line"><span class="attr">category_dir:</span> <span class="string">categories</span></div><div class="line"><span class="attr">code_dir:</span> <span class="string">downloads/code</span></div><div class="line"><span class="attr">i18n_dir:</span> <span class="string">:lang</span></div><div class="line"><span class="attr">skip_render:</span></div><div class="line"></div><div class="line"><span class="comment"># Writing</span></div><div class="line"><span class="attr">new_post_name:</span> <span class="attr">year-:month-:day-:title.md</span> <span class="comment"># File name of new posts</span></div><div class="line"><span class="attr">default_layout:</span> <span class="string">post</span></div><div class="line"><span class="attr">titlecase:</span> <span class="literal">false</span> <span class="comment"># Transform title into titlecase</span></div><div class="line"><span class="attr">external_link:</span> <span class="literal">true</span> <span class="comment"># Open external links in new tab</span></div><div class="line"><span class="attr">filename_case:</span> <span class="number">0</span></div><div class="line"><span class="attr">render_drafts:</span> <span class="literal">false</span></div><div class="line"><span class="attr">post_asset_folder:</span> <span class="literal">false</span></div><div class="line"><span class="attr">relative_link:</span> <span class="literal">false</span></div><div class="line"><span class="attr">future:</span> <span class="literal">true</span></div><div class="line"><span class="attr">highlight:</span></div><div class="line"><span class="attr">  enable:</span> <span class="literal">true</span></div><div class="line"><span class="attr">  line_number:</span> <span class="literal">true</span></div><div class="line"><span class="attr">  auto_detect:</span> <span class="literal">false</span></div><div class="line"><span class="attr">  tab_replace:</span></div><div class="line"></div><div class="line"><span class="comment"># Category &amp; Tag</span></div><div class="line"><span class="attr">default_category:</span> <span class="string">uncategorized</span></div><div class="line"><span class="attr">category_map:</span></div><div class="line"><span class="attr">tag_map:</span></div><div class="line"></div><div class="line"><span class="comment"># Date / Time format</span></div><div class="line"><span class="comment">## Hexo uses Moment.js to parse and display date</span></div><div class="line"><span class="comment">## You can customize the date format as defined in</span></div><div class="line"><span class="comment">## http://momentjs.com/docs/#/displaying/format/</span></div><div class="line"><span class="attr">date_format:</span> <span class="string">YYYY-MM-DD</span></div><div class="line"><span class="attr">time_format:</span> <span class="attr">HH:mm:ss</span></div><div class="line"></div><div class="line"><span class="comment"># Pagination</span></div><div class="line"><span class="comment">## Set per_page to 0 to disable pagination</span></div><div class="line"><span class="attr">per_page:</span> <span class="number">10</span></div><div class="line"><span class="attr">pagination_dir:</span> <span class="string">page</span></div><div class="line"></div><div class="line"><span class="comment"># Extensions</span></div><div class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></div><div class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></div><div class="line"><span class="attr">theme:</span> <span class="string">next</span></div><div class="line"></div><div class="line"><span class="comment"># Deployment</span></div><div class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></div><div class="line"><span class="attr">deploy:</span></div><div class="line"><span class="attr">  type:</span> <span class="string">git</span></div><div class="line"><span class="attr">  repo:</span> <span class="attr">https://github.com/maintel/maintel.github.io.git</span></div><div class="line"><span class="attr">  branch:</span> <span class="string">master</span></div></pre></td></tr></table></figure>
<p>主题配置文件：</p>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div><div class="line">370</div><div class="line">371</div><div class="line">372</div><div class="line">373</div><div class="line">374</div><div class="line">375</div><div class="line">376</div><div class="line">377</div><div class="line">378</div><div class="line">379</div><div class="line">380</div><div class="line">381</div><div class="line">382</div><div class="line">383</div><div class="line">384</div><div class="line">385</div><div class="line">386</div><div class="line">387</div><div class="line">388</div><div class="line">389</div><div class="line">390</div><div class="line">391</div><div class="line">392</div><div class="line">393</div><div class="line">394</div><div class="line">395</div><div class="line">396</div><div class="line">397</div><div class="line">398</div><div class="line">399</div><div class="line">400</div><div class="line">401</div><div class="line">402</div><div class="line">403</div><div class="line">404</div><div class="line">405</div><div class="line">406</div><div class="line">407</div><div class="line">408</div><div class="line">409</div><div class="line">410</div><div class="line">411</div><div class="line">412</div><div class="line">413</div><div class="line">414</div><div class="line">415</div><div class="line">416</div><div class="line">417</div><div class="line">418</div><div class="line">419</div><div class="line">420</div><div class="line">421</div><div class="line">422</div><div class="line">423</div><div class="line">424</div><div class="line">425</div><div class="line">426</div><div class="line">427</div><div class="line">428</div><div class="line">429</div><div class="line">430</div><div class="line">431</div><div class="line">432</div><div class="line">433</div><div class="line">434</div><div class="line">435</div><div class="line">436</div><div class="line">437</div><div class="line">438</div><div class="line">439</div><div class="line">440</div><div class="line">441</div><div class="line">442</div><div class="line">443</div><div class="line">444</div><div class="line">445</div><div class="line">446</div><div class="line">447</div><div class="line">448</div><div class="line">449</div><div class="line">450</div><div class="line">451</div><div class="line">452</div><div class="line">453</div><div class="line">454</div><div class="line">455</div><div class="line">456</div><div class="line">457</div><div class="line">458</div><div class="line">459</div><div class="line">460</div><div class="line">461</div><div class="line">462</div><div class="line">463</div><div class="line">464</div><div class="line">465</div><div class="line">466</div><div class="line">467</div><div class="line">468</div><div class="line">469</div><div class="line">470</div><div class="line">471</div><div class="line">472</div><div class="line">473</div><div class="line">474</div><div class="line">475</div><div class="line">476</div><div class="line">477</div><div class="line">478</div><div class="line">479</div><div class="line">480</div><div class="line">481</div><div class="line">482</div><div class="line">483</div><div class="line">484</div><div class="line">485</div><div class="line">486</div><div class="line">487</div><div class="line">488</div><div class="line">489</div><div class="line">490</div><div class="line">491</div><div class="line">492</div><div class="line">493</div><div class="line">494</div><div class="line">495</div><div class="line">496</div><div class="line">497</div><div class="line">498</div><div class="line">499</div><div class="line">500</div><div class="line">501</div><div class="line">502</div><div class="line">503</div><div class="line">504</div><div class="line">505</div><div class="line">506</div><div class="line">507</div><div class="line">508</div><div class="line">509</div><div class="line">510</div><div class="line">511</div><div class="line">512</div><div class="line">513</div><div class="line">514</div><div class="line">515</div><div class="line">516</div><div class="line">517</div><div class="line">518</div><div class="line">519</div><div class="line">520</div><div class="line">521</div><div class="line">522</div><div class="line">523</div><div class="line">524</div><div class="line">525</div><div class="line">526</div><div class="line">527</div><div class="line">528</div><div class="line">529</div><div class="line">530</div><div class="line">531</div><div class="line">532</div><div class="line">533</div><div class="line">534</div><div class="line">535</div><div class="line">536</div><div class="line">537</div><div class="line">538</div><div class="line">539</div><div class="line">540</div><div class="line">541</div><div class="line">542</div><div class="line">543</div><div class="line">544</div><div class="line">545</div><div class="line">546</div><div class="line">547</div><div class="line">548</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># ---------------------------------------------------------------</span></div><div class="line"><span class="comment"># Site Information Settings</span></div><div class="line"><span class="comment"># ---------------------------------------------------------------</span></div><div class="line"></div><div class="line"><span class="comment"># Put your favicon.ico into `hexo-site/source/` directory.</span></div><div class="line"><span class="attr">favicon:</span> <span class="string">/favicon.ico</span></div><div class="line"></div><div class="line"><span class="comment"># Set default keywords (Use a comma to separate)</span></div><div class="line"><span class="attr">keywords:</span> <span class="string">"Hexo, NexT"</span></div><div class="line"></div><div class="line"><span class="comment"># Set rss to false to disable feed link.</span></div><div class="line"><span class="comment"># Leave rss as empty to use site's feed link.</span></div><div class="line"><span class="comment"># Set rss to specific value if you have burned your feed already.</span></div><div class="line"><span class="attr">rss:</span></div><div class="line"></div><div class="line"><span class="comment"># Specify the date when the site was setup</span></div><div class="line"><span class="comment">#since: 2015</span></div><div class="line"></div><div class="line"><span class="comment"># icon between year and author @Footer</span></div><div class="line"><span class="attr">authoricon:</span> <span class="string">heart</span></div><div class="line"></div><div class="line"><span class="comment"># Footer `powered-by` and `theme-info` copyright</span></div><div class="line"><span class="attr">copyright:</span> <span class="literal">true</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># Canonical, set a canonical link tag in your hexo, you could use it for your SEO of blog.</span></div><div class="line"><span class="comment"># See: https://support.google.com/webmasters/answer/139066</span></div><div class="line"><span class="comment"># Tips: Before you open this tag, remember set up your URL in hexo _config.yml ( ex. url: http://yourdomain.com )</span></div><div class="line"><span class="attr">canonical:</span> <span class="literal">true</span></div><div class="line"></div><div class="line"><span class="comment"># Change headers hierarchy on site-subtitle (will be main site description) and on all post/pages titles for better SEO-optimization.</span></div><div class="line"><span class="attr">seo:</span> <span class="literal">false</span></div><div class="line"></div><div class="line"><span class="comment"># ---------------------------------------------------------------</span></div><div class="line"><span class="comment"># Menu Settings</span></div><div class="line"><span class="comment"># ---------------------------------------------------------------</span></div><div class="line"></div><div class="line"><span class="comment"># When running the site in a subdirectory (e.g. domain.tld/blog), remove the leading slash (/archives -&gt; archives)</span></div><div class="line"><span class="attr">menu:</span></div><div class="line"><span class="attr">  home:</span> <span class="string">/</span></div><div class="line"><span class="attr">  categories:</span> <span class="string">/categories/index.html</span></div><div class="line"><span class="attr">  about:</span> <span class="string">/about</span></div><div class="line"><span class="attr">  archives:</span> <span class="string">/archives/index.html</span></div><div class="line"><span class="attr">  tags:</span> <span class="string">/tags/index.html</span></div><div class="line">  <span class="comment">#sitemap: /sitemap.xml</span></div><div class="line">  <span class="comment"># commonweal: /404.html</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># Enable/Disable menu icons.</span></div><div class="line"><span class="comment"># Icon Mapping:</span></div><div class="line"><span class="comment">#   Map a menu item to a specific FontAwesome icon name.</span></div><div class="line"><span class="comment">#   Key is the name of menu item and value is the name of FontAwesome icon. Key is case-senstive.</span></div><div class="line"><span class="comment">#   When an question mask icon presenting up means that the item has no mapping icon.</span></div><div class="line"><span class="attr">menu_icons:</span></div><div class="line"><span class="attr">  enable:</span> <span class="literal">true</span></div><div class="line">  <span class="comment">#KeyMapsToMenuItemKey: NameOfTheIconFromFontAwesome</span></div><div class="line"><span class="attr">  home:</span> <span class="string">home</span></div><div class="line"><span class="attr">  about:</span> <span class="string">user</span></div><div class="line"><span class="attr">  categories:</span> <span class="string">th</span></div><div class="line"><span class="attr">  schedule:</span> <span class="string">calendar</span></div><div class="line"><span class="attr">  tags:</span> <span class="string">tags</span></div><div class="line"><span class="attr">  archives:</span> <span class="string">archive</span></div><div class="line"><span class="attr">  sitemap:</span> <span class="string">sitemap</span></div><div class="line"><span class="attr">  commonweal:</span> <span class="string">heartbeat</span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># ---------------------------------------------------------------</span></div><div class="line"><span class="comment"># Scheme Settings</span></div><div class="line"><span class="comment"># ---------------------------------------------------------------</span></div><div class="line"></div><div class="line"><span class="comment"># Schemes</span></div><div class="line"><span class="comment"># scheme: Muse</span></div><div class="line"><span class="attr">scheme:</span> <span class="string">Mist</span></div><div class="line"><span class="comment">#scheme: Pisces</span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># ---------------------------------------------------------------</span></div><div class="line"><span class="comment"># Font Settings</span></div><div class="line"><span class="comment"># - Find fonts on Google Fonts (https://www.google.com/fonts)</span></div><div class="line"><span class="comment"># - All fonts set here will have the following styles:</span></div><div class="line"><span class="comment">#     light, light italic, normal, normal italic, bold, bold italic</span></div><div class="line"><span class="comment"># - Be aware that setting too much fonts will cause site running slowly</span></div><div class="line"><span class="comment"># - Introduce in 5.0.1</span></div><div class="line"><span class="comment"># ---------------------------------------------------------------</span></div><div class="line"><span class="attr">font:</span></div><div class="line"><span class="attr">  enable:</span> <span class="literal">true</span></div><div class="line"></div><div class="line">  <span class="comment"># Uri of fonts host. E.g. //fonts.googleapis.com (Default)</span></div><div class="line"><span class="attr">  host:</span></div><div class="line"></div><div class="line">  <span class="comment"># Global font settings used on &lt;body&gt; element.</span></div><div class="line"><span class="attr">  global:</span></div><div class="line">    <span class="comment"># external: true will load this font family from host.</span></div><div class="line"><span class="attr">    external:</span> <span class="literal">true</span></div><div class="line"><span class="attr">    family:</span> <span class="string">Lato</span></div><div class="line"></div><div class="line">  <span class="comment"># Font settings for Headlines (h1, h2, h3, h4, h5, h6)</span></div><div class="line">  <span class="comment"># Fallback to `global` font settings.</span></div><div class="line"><span class="attr">  headings:</span></div><div class="line"><span class="attr">    external:</span> <span class="literal">true</span></div><div class="line"><span class="attr">    family:</span></div><div class="line"></div><div class="line">  <span class="comment"># Font settings for posts</span></div><div class="line">  <span class="comment"># Fallback to `global` font settings.</span></div><div class="line"><span class="attr">  posts:</span></div><div class="line"><span class="attr">    external:</span> <span class="literal">true</span></div><div class="line"><span class="attr">    family:</span></div><div class="line"></div><div class="line">  <span class="comment"># Font settings for Logo</span></div><div class="line">  <span class="comment"># Fallback to `global` font settings.</span></div><div class="line">  <span class="comment"># The `size` option use `px` as unit</span></div><div class="line"><span class="attr">  logo:</span></div><div class="line"><span class="attr">    external:</span> <span class="literal">true</span></div><div class="line"><span class="attr">    family:</span></div><div class="line"><span class="attr">    size:</span></div><div class="line"></div><div class="line">  <span class="comment"># Font settings for &lt;code&gt; and code blocks.</span></div><div class="line"><span class="attr">  codes:</span></div><div class="line"><span class="attr">    external:</span> <span class="literal">true</span></div><div class="line"><span class="attr">    family:</span></div><div class="line"><span class="attr">    size:</span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># ---------------------------------------------------------------</span></div><div class="line"><span class="comment"># Sidebar Settings</span></div><div class="line"><span class="comment"># ---------------------------------------------------------------</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># Social Links</span></div><div class="line"><span class="comment"># Key is the link label showing to end users.</span></div><div class="line"><span class="comment"># Value is the target link (E.g. GitHub: https://github.com/iissnan)</span></div><div class="line"><span class="comment">#social:</span></div><div class="line">  <span class="comment">#LinkLabel: Link</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># Social links</span></div><div class="line"><span class="attr">social:</span></div><div class="line"><span class="attr">  GitHub:</span> <span class="attr">https://github.com/maintel</span></div><div class="line">  <span class="comment"># weibo: http://weibo.com/ouyanglip</span></div><div class="line">  <span class="comment"># zhihu: http://www.zhihu.com/people/lippi-ouyang</span></div><div class="line">  <span class="comment">#Others:</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># Social Links Icons</span></div><div class="line"><span class="comment"># Icon Mapping:</span></div><div class="line"><span class="comment">#   Map a menu item to a specific FontAwesome icon name.</span></div><div class="line"><span class="comment">#   Key is the name of the item and value is the name of FontAwesome icon. Key is case-senstive.</span></div><div class="line"><span class="comment">#   When an globe mask icon presenting up means that the item has no mapping icon.</span></div><div class="line"><span class="attr">social_icons:</span></div><div class="line"><span class="attr">  enable:</span> <span class="literal">true</span></div><div class="line">  <span class="comment"># Icon Mappings.</span></div><div class="line">  <span class="comment"># KeyMapsToSocialItemKey: NameOfTheIconFromFontAwesome</span></div><div class="line"><span class="attr">  GitHub:</span> <span class="string">github</span></div><div class="line">  <span class="comment"># Twitter: twitter</span></div><div class="line">  <span class="comment"># Weibo: weibo</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># Sidebar Avatar</span></div><div class="line"><span class="comment"># in theme directory(source/images): /images/avatar.jpg</span></div><div class="line"><span class="comment"># in site  directory(source/uploads): /uploads/avatar.jpg</span></div><div class="line"><span class="attr">avatar:</span> <span class="string">/images/avatar.jpg</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># Table Of Contents in the Sidebar</span></div><div class="line"><span class="attr">toc:</span></div><div class="line"><span class="attr">  enable:</span> <span class="literal">true</span></div><div class="line"></div><div class="line">  <span class="comment"># Automatically add list number to toc.</span></div><div class="line"><span class="attr">  number:</span> <span class="literal">true</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># Creative Commons 4.0 International License.</span></div><div class="line"><span class="comment"># http://creativecommons.org/</span></div><div class="line"><span class="comment"># Available: by | by-nc | by-nc-nd | by-nc-sa | by-nd | by-sa | zero</span></div><div class="line"><span class="comment">#creative_commons: by-nc-sa</span></div><div class="line"><span class="comment">#creative_commons:</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="attr">sidebar:</span></div><div class="line">  <span class="comment"># Sidebar Position, available value: left | right</span></div><div class="line"><span class="attr">  position:</span> <span class="string">left</span></div><div class="line">  <span class="comment">#position: right</span></div><div class="line"></div><div class="line">  <span class="comment"># Sidebar Display, available value:</span></div><div class="line">  <span class="comment">#  - post    expand on posts automatically. Default.</span></div><div class="line">  <span class="comment">#  - always  expand for all pages automatically</span></div><div class="line">  <span class="comment">#  - hide    expand only when click on the sidebar toggle icon.</span></div><div class="line">  <span class="comment">#  - remove  Totally remove sidebar including sidebar toggle.</span></div><div class="line"><span class="attr">  display:</span> <span class="string">post</span></div><div class="line">  <span class="comment">#display: always</span></div><div class="line">  <span class="comment">#display: hide</span></div><div class="line">  <span class="comment">#display: remove</span></div><div class="line"></div><div class="line">  <span class="comment"># Sidebar offset from top menubar in pixels.</span></div><div class="line"><span class="attr">  offset:</span> <span class="number">12</span></div><div class="line"><span class="attr">  offset_float:</span> <span class="number">0</span></div><div class="line"></div><div class="line">  <span class="comment"># Back to top in sidebar</span></div><div class="line"><span class="attr">  b2t:</span> <span class="literal">false</span></div><div class="line"></div><div class="line">  <span class="comment"># Scroll percent label in b2t button</span></div><div class="line"><span class="attr">  scrollpercent:</span> <span class="literal">false</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># Blog rolls</span></div><div class="line"><span class="comment">#links_title: Links</span></div><div class="line"><span class="comment">#links_layout: block</span></div><div class="line"><span class="comment">#links_layout: inline</span></div><div class="line"><span class="comment">#links:</span></div><div class="line">  <span class="comment">#Title: http://example.com/</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># ---------------------------------------------------------------</span></div><div class="line"><span class="comment"># Post Settings</span></div><div class="line"><span class="comment"># ---------------------------------------------------------------</span></div><div class="line"></div><div class="line"><span class="comment"># Automatically scroll page to section which is under &lt;!-- more --&gt; mark.</span></div><div class="line"><span class="attr">scroll_to_more:</span> <span class="literal">true</span></div><div class="line"></div><div class="line"><span class="comment"># Automatically excerpt description in homepage as preamble text.duo</span></div><div class="line"><span class="attr">excerpt_description:</span> <span class="literal">true</span></div><div class="line"></div><div class="line"><span class="comment"># Automatically Excerpt. Not recommend.</span></div><div class="line"><span class="comment"># Please use &lt;!-- more --&gt; in the post to control excerpt accurately.</span></div><div class="line"><span class="attr">auto_excerpt:</span></div><div class="line"><span class="attr">  enable:</span> <span class="literal">true</span></div><div class="line"><span class="attr">  length:</span> <span class="number">150</span></div><div class="line"></div><div class="line"><span class="comment"># Post meta display settings</span></div><div class="line"><span class="attr">post_meta:</span></div><div class="line"><span class="attr">  item_text:</span> <span class="literal">true</span></div><div class="line"><span class="attr">  created_at:</span> <span class="literal">true</span></div><div class="line"><span class="attr">  updated_at:</span> <span class="literal">false</span></div><div class="line"><span class="attr">  categories:</span> <span class="literal">true</span></div><div class="line"></div><div class="line"><span class="comment"># Post wordcount display settings</span></div><div class="line"><span class="comment"># Dependencies: https://github.com/willin/hexo-wordcount</span></div><div class="line"><span class="attr">post_wordcount:</span></div><div class="line"><span class="attr">  item_text:</span> <span class="literal">true</span></div><div class="line"><span class="attr">  wordcount:</span> <span class="literal">false</span></div><div class="line"><span class="attr">  min2read:</span> <span class="literal">false</span></div><div class="line"></div><div class="line"><span class="comment"># Wechat Subscriber</span></div><div class="line"><span class="comment">#wechat_subscriber:</span></div><div class="line">  <span class="comment">#enabled: true</span></div><div class="line">  <span class="comment">#qcode: /path/to/your/wechatqcode ex. /uploads/wechat-qcode.jpg</span></div><div class="line">  <span class="comment">#description: ex. subscribe to my blog by scanning my public wechat account</span></div><div class="line"></div><div class="line"><span class="comment"># Declare license on posts</span></div><div class="line"><span class="attr">post_copyright:</span></div><div class="line"><span class="attr">  enable:</span> <span class="literal">false</span></div><div class="line"><span class="attr">  license:</span> <span class="string">CC</span> <span class="string">BY-NC-SA</span> <span class="number">3.0</span></div><div class="line"><span class="attr">  license_url:</span> <span class="attr">https://creativecommons.org/licenses/by-nc-sa/3.0/</span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># ---------------------------------------------------------------</span></div><div class="line"><span class="comment"># Misc Theme Settings</span></div><div class="line"><span class="comment"># ---------------------------------------------------------------</span></div><div class="line"></div><div class="line"><span class="comment"># Custom Logo.</span></div><div class="line"><span class="comment"># !!Only available for Default Scheme currently.</span></div><div class="line"><span class="comment"># Options:</span></div><div class="line"><span class="comment">#   enabled: [true/false] - Replace with specific image</span></div><div class="line"><span class="comment">#   image: url-of-image   - Images's url</span></div><div class="line"><span class="attr">custom_logo:</span></div><div class="line"><span class="attr">  enabled:</span> <span class="literal">false</span></div><div class="line"><span class="attr">  image:</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># Code Highlight theme</span></div><div class="line"><span class="comment"># Available value:</span></div><div class="line"><span class="comment">#    normal | night | night eighties | night blue | night bright</span></div><div class="line"><span class="comment"># https://github.com/chriskempson/tomorrow-theme</span></div><div class="line"><span class="attr">highlight_theme:</span> <span class="string">normal</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># ---------------------------------------------------------------</span></div><div class="line"><span class="comment"># Third Party Services Settings</span></div><div class="line"><span class="comment"># ---------------------------------------------------------------</span></div><div class="line"></div><div class="line"><span class="comment"># MathJax Support</span></div><div class="line"><span class="attr">mathjax:</span></div><div class="line"><span class="attr">  enable:</span> <span class="literal">false</span></div><div class="line"><span class="attr">  per_page:</span> <span class="literal">false</span></div><div class="line"><span class="attr">  cdn:</span> <span class="string">//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># Swiftype Search API Key</span></div><div class="line"><span class="comment">#swiftype_key:</span></div><div class="line"></div><div class="line"><span class="comment"># Baidu Analytics ID</span></div><div class="line"><span class="attr">baidu_analytics:</span> <span class="number">3e7</span><span class="string">db1112f6e1fe650d6ace646c9e4e3</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># Duoshuo ShortName</span></div><div class="line"><span class="comment"># duoshuo_shortname: maintel</span></div><div class="line"></div><div class="line"><span class="comment"># Disqus</span></div><div class="line"><span class="comment">#disqus_shortname:</span></div><div class="line"></div><div class="line"><span class="comment"># Hypercomments</span></div><div class="line"><span class="comment">#hypercomments_id:</span></div><div class="line"></div><div class="line"><span class="comment"># Gentie productKey</span></div><div class="line"><span class="comment">#gentie_productKey:</span></div><div class="line"></div><div class="line"><span class="comment"># Support for youyan comments system.</span></div><div class="line"><span class="comment"># You can get your uid from http://www.uyan.cc</span></div><div class="line"><span class="comment">#youyan_uid: your uid</span></div><div class="line"></div><div class="line"><span class="comment"># Support for LiveRe comments system.</span></div><div class="line"><span class="comment"># You can get your uid from https://livere.com/insight/myCode (General web site)</span></div><div class="line"><span class="comment">#livere_uid: your uid</span></div><div class="line"></div><div class="line"><span class="comment"># Baidu Share</span></div><div class="line"><span class="comment"># Available value:</span></div><div class="line"><span class="comment">#    button | slide</span></div><div class="line"><span class="comment"># Warning: Baidu Share does not support https.</span></div><div class="line"><span class="comment">#baidushare:</span></div><div class="line"><span class="comment">##  type: button</span></div><div class="line"></div><div class="line"><span class="comment"># Share</span></div><div class="line"><span class="comment">#jiathis:</span></div><div class="line"><span class="comment"># Warning: JiaThis does not support https.</span></div><div class="line"><span class="comment">#add_this_id:</span></div><div class="line"></div><div class="line"><span class="comment"># Share</span></div><div class="line"><span class="comment"># duoshuo_share: true</span></div><div class="line"><span class="comment"># duoshuo_hotartical: true</span></div><div class="line"></div><div class="line"><span class="comment"># Google Webmaster tools verification setting</span></div><div class="line"><span class="comment"># See: https://www.google.com/webmasters/</span></div><div class="line"><span class="comment">#google_site_verification:</span></div><div class="line"></div><div class="line"><span class="comment"># Google Analytics</span></div><div class="line"><span class="comment">#google_analytics:</span></div><div class="line"></div><div class="line"><span class="comment"># Yandex Webmaster tools verification setting</span></div><div class="line"><span class="comment"># See: https://webmaster.yandex.ru/</span></div><div class="line"><span class="comment">#yandex_site_verification:</span></div><div class="line"></div><div class="line"><span class="comment"># CNZZ count</span></div><div class="line"><span class="comment">#cnzz_siteid:</span></div><div class="line"></div><div class="line"><span class="comment"># Application Insights</span></div><div class="line"><span class="comment"># See https://azure.microsoft.com/en-us/services/application-insights/</span></div><div class="line"><span class="comment"># application_insights:</span></div><div class="line"></div><div class="line"><span class="comment"># Make duoshuo show UA</span></div><div class="line"><span class="comment"># user_id must NOT be null when admin_enable is true!</span></div><div class="line"><span class="comment"># you can visit http://dev.duoshuo.com get duoshuo user id.</span></div><div class="line"><span class="comment"># duoshuo_info:</span></div><div class="line"><span class="comment">#   ua_enable: true</span></div><div class="line"><span class="comment">#   admin_enable: false</span></div><div class="line"><span class="comment">#   user_id: 0</span></div><div class="line">  <span class="comment">#admin_nickname: Author</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># Facebook SDK Support.</span></div><div class="line"><span class="comment"># https://github.com/iissnan/hexo-theme-next/pull/410</span></div><div class="line"><span class="attr">facebook_sdk:</span></div><div class="line"><span class="attr">  enable:</span> <span class="literal">false</span></div><div class="line"><span class="attr">  app_id:</span>       <span class="comment">#&lt;app_id&gt;</span></div><div class="line"><span class="attr">  fb_admin:</span>     <span class="comment">#&lt;user_id&gt;</span></div><div class="line"><span class="attr">  like_button:</span>  <span class="comment">#true</span></div><div class="line"><span class="attr">  webmaster:</span>    <span class="comment">#true</span></div><div class="line"></div><div class="line"><span class="comment"># Facebook comments plugin</span></div><div class="line"><span class="comment"># This plugin depends on Facebook SDK.</span></div><div class="line"><span class="comment"># If facebook_sdk.enable is false, Facebook comments plugin is unavailable.</span></div><div class="line"><span class="attr">facebook_comments_plugin:</span></div><div class="line"><span class="attr">  enable:</span> <span class="literal">false</span></div><div class="line"><span class="attr">  num_of_posts:</span> <span class="number">10</span>  <span class="comment"># min posts num is 1</span></div><div class="line"><span class="attr">  width:</span> <span class="number">100</span><span class="string">%</span>       <span class="comment"># default width is 550px</span></div><div class="line"><span class="attr">  scheme:</span> <span class="string">light</span>     <span class="comment"># default scheme is light (light or dark)</span></div><div class="line"></div><div class="line"><span class="comment"># VKontakte API Support.</span></div><div class="line"><span class="comment"># To get your AppID visit https://vk.com/editapp?act=create</span></div><div class="line"><span class="attr">vkontakte_api:</span></div><div class="line"><span class="attr">  enable:</span> <span class="literal">false</span></div><div class="line"><span class="attr">  app_id:</span>       <span class="comment">#&lt;app_id&gt;</span></div><div class="line"><span class="attr">  like:</span>         <span class="literal">true</span></div><div class="line"><span class="attr">  comments:</span>     <span class="literal">true</span></div><div class="line"><span class="attr">  num_of_posts:</span> <span class="number">10</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># Show number of visitors to each article.</span></div><div class="line"><span class="comment"># You can visit https://leancloud.cn get AppID and AppKey.</span></div><div class="line"><span class="attr">leancloud_visitors:</span></div><div class="line"><span class="attr">  enable:</span> <span class="literal">false</span></div><div class="line"><span class="attr">  app_id:</span> <span class="comment">#&lt;app_id&gt;</span></div><div class="line"><span class="attr">  app_key:</span> <span class="comment">#&lt;app_key&gt;</span></div><div class="line"></div><div class="line"><span class="comment"># Show PV/UV of the website/page with busuanzi.</span></div><div class="line"><span class="comment"># Get more information on http://ibruce.info/2015/04/04/busuanzi/</span></div><div class="line"><span class="attr">busuanzi_count:</span></div><div class="line">  <span class="comment"># count values only if the other configs are false</span></div><div class="line"><span class="attr">  enable:</span> <span class="literal">false</span></div><div class="line">  <span class="comment"># custom uv span for the whole site</span></div><div class="line"><span class="attr">  site_uv:</span> <span class="literal">true</span></div><div class="line"><span class="attr">  site_uv_header:</span> <span class="string">&lt;i</span> <span class="string">class="fa</span> <span class="string">fa-user"&gt;&lt;/i&gt;</span></div><div class="line"><span class="attr">  site_uv_footer:</span></div><div class="line">  <span class="comment"># custom pv span for the whole site</span></div><div class="line"><span class="attr">  site_pv:</span> <span class="literal">true</span></div><div class="line"><span class="attr">  site_pv_header:</span> <span class="string">&lt;i</span> <span class="string">class="fa</span> <span class="string">fa-eye"&gt;&lt;/i&gt;</span></div><div class="line"><span class="attr">  site_pv_footer:</span></div><div class="line">  <span class="comment"># custom pv span for one page only</span></div><div class="line"><span class="attr">  page_pv:</span> <span class="literal">true</span></div><div class="line"><span class="attr">  page_pv_header:</span> <span class="string">&lt;i</span> <span class="string">class="fa</span> <span class="string">fa-file-o"&gt;&lt;/i&gt;</span></div><div class="line"><span class="attr">  page_pv_footer:</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># Tencent analytics ID</span></div><div class="line"><span class="comment"># tencent_analytics:</span></div><div class="line"></div><div class="line"><span class="comment"># Tencent MTA ID</span></div><div class="line"><span class="comment"># tencent_mta:</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># Enable baidu push so that the blog will push the url to baidu automatically which is very helpful for SEO</span></div><div class="line"><span class="attr">baidu_push:</span> <span class="literal">false</span></div><div class="line"></div><div class="line"><span class="comment"># Google Calendar</span></div><div class="line"><span class="comment"># Share your recent schedule to others via calendar page</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># API Documentation:</span></div><div class="line"><span class="comment"># https://developers.google.com/google-apps/calendar/v3/reference/events/list</span></div><div class="line"><span class="attr">calendar:</span></div><div class="line"><span class="attr">  enable:</span> <span class="literal">false</span></div><div class="line"><span class="attr">  calendar_id:</span> <span class="string">&lt;required&gt;</span></div><div class="line"><span class="attr">  api_key:</span> <span class="string">&lt;required&gt;</span></div><div class="line"><span class="attr">  orderBy:</span> <span class="string">startTime</span></div><div class="line"><span class="attr">  offsetMax:</span> <span class="number">24</span></div><div class="line"><span class="attr">  offsetMin:</span> <span class="number">4</span></div><div class="line"><span class="attr">  timeZone:</span></div><div class="line"><span class="attr">  showDeleted:</span> <span class="literal">false</span></div><div class="line"><span class="attr">  singleEvents:</span> <span class="literal">true</span></div><div class="line"><span class="attr">  maxResults:</span> <span class="number">250</span></div><div class="line"></div><div class="line"><span class="comment"># Algolia Search</span></div><div class="line"><span class="attr">algolia_search:</span></div><div class="line"><span class="attr">  enable:</span> <span class="literal">false</span></div><div class="line"><span class="attr">  hits:</span></div><div class="line"><span class="attr">    per_page:</span> <span class="number">10</span></div><div class="line"><span class="attr">  labels:</span></div><div class="line"><span class="attr">    input_placeholder:</span> <span class="string">Search</span> <span class="string">for</span> <span class="string">Posts</span></div><div class="line"><span class="attr">    hits_empty:</span> <span class="string">"We didn't find any results for the search: $&#123;query&#125;"</span></div><div class="line"><span class="attr">    hits_stats:</span> <span class="string">"$&#123;hits&#125; results found in $&#123;time&#125; ms"</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># Local search</span></div><div class="line"><span class="attr">local_search:</span></div><div class="line"><span class="attr">  enable:</span> <span class="literal">false</span></div><div class="line"></div><div class="line"><span class="comment"># External URL with BASE64 encrypt &amp; decrypt</span></div><div class="line"><span class="comment"># Usage: &#123;% exturl text url "title" %&#125;</span></div><div class="line"><span class="comment"># Alias: &#123;% extlink text url "title" %&#125;</span></div><div class="line"><span class="attr">exturl:</span> <span class="literal">false</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">#! ---------------------------------------------------------------</span></div><div class="line"><span class="comment">#! DO NOT EDIT THE FOLLOWING SETTINGS</span></div><div class="line"><span class="comment">#! UNLESS YOU KNOW WHAT YOU ARE DOING</span></div><div class="line"><span class="comment">#! ---------------------------------------------------------------</span></div><div class="line"></div><div class="line"><span class="comment"># Motion</span></div><div class="line"><span class="attr">use_motion:</span> <span class="literal">true</span></div><div class="line"></div><div class="line"><span class="comment"># Fancybox</span></div><div class="line"><span class="attr">fancybox:</span> <span class="literal">true</span></div><div class="line"></div><div class="line"><span class="comment"># Canvas-nest</span></div><div class="line"><span class="attr">canvas_nest:</span> <span class="literal">false</span></div><div class="line"></div><div class="line"><span class="comment"># Script Vendors.</span></div><div class="line"><span class="comment"># Set a CDN address for the vendor you want to customize.</span></div><div class="line"><span class="comment"># For example</span></div><div class="line"><span class="comment">#    jquery: https://ajax.googleapis.com/ajax/libs/jquery/2.2.0/jquery.min.js</span></div><div class="line"><span class="comment"># Be aware that you should use the same version as internal ones to avoid potential problems.</span></div><div class="line"><span class="comment"># Please use the https protocol of CDN files when you enable https on your site.</span></div><div class="line"><span class="attr">vendors:</span></div><div class="line">  <span class="comment"># Internal path prefix. Please do not edit it.</span></div><div class="line"><span class="attr">  _internal:</span> <span class="string">lib</span></div><div class="line"></div><div class="line">  <span class="comment"># Internal version: 2.1.3</span></div><div class="line"><span class="attr">  jquery:</span></div><div class="line"></div><div class="line">  <span class="comment"># Internal version: 2.1.5</span></div><div class="line">  <span class="comment"># See: http://fancyapps.com/fancybox/</span></div><div class="line"><span class="attr">  fancybox:</span></div><div class="line"><span class="attr">  fancybox_css:</span></div><div class="line"></div><div class="line">  <span class="comment"># Internal version: 1.0.6</span></div><div class="line">  <span class="comment"># See: https://github.com/ftlabs/fastclick</span></div><div class="line"><span class="attr">  fastclick:</span></div><div class="line"></div><div class="line">  <span class="comment"># Internal version: 1.9.7</span></div><div class="line">  <span class="comment"># See: https://github.com/tuupola/jquery_lazyload</span></div><div class="line"><span class="attr">  lazyload:</span></div><div class="line"></div><div class="line">  <span class="comment"># Internal version: 1.2.1</span></div><div class="line">  <span class="comment"># See: http://VelocityJS.org</span></div><div class="line"><span class="attr">  velocity:</span></div><div class="line"></div><div class="line">  <span class="comment"># Internal version: 1.2.1</span></div><div class="line">  <span class="comment"># See: http://VelocityJS.org</span></div><div class="line"><span class="attr">  velocity_ui:</span></div><div class="line"></div><div class="line">  <span class="comment"># Internal version: 0.7.9</span></div><div class="line">  <span class="comment"># See: https://faisalman.github.io/ua-parser-js/</span></div><div class="line"><span class="attr">  ua_parser:</span></div><div class="line"></div><div class="line">  <span class="comment"># Internal version: 4.6.2</span></div><div class="line">  <span class="comment"># See: http://fontawesome.io/</span></div><div class="line"><span class="attr">  fontawesome:</span></div><div class="line"></div><div class="line">  <span class="comment"># Internal version: 1</span></div><div class="line">  <span class="comment"># https://www.algolia.com</span></div><div class="line"><span class="attr">  algolia_instant_js:</span></div><div class="line"><span class="attr">  algolia_instant_css:</span></div><div class="line"></div><div class="line">  <span class="comment"># Internal version: 1.0.0</span></div><div class="line">  <span class="comment"># https://github.com/hustcc/canvas-nest.js</span></div><div class="line"><span class="attr">  canvas_nest:</span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># Assets</span></div><div class="line"><span class="attr">css:</span> <span class="string">css</span></div><div class="line"><span class="attr">js:</span> <span class="string">js</span></div><div class="line"><span class="attr">images:</span> <span class="string">images</span></div><div class="line"></div><div class="line"><span class="comment"># Theme version</span></div><div class="line"><span class="attr">version:</span> <span class="number">5.1</span><span class="number">.0</span></div><div class="line"></div><div class="line"><span class="comment"># title</span></div><div class="line"><span class="attr">links_title:</span> <span class="string">友情链接</span></div><div class="line"><span class="attr">links:</span></div><div class="line"><span class="attr">  maintel:</span> <span class="attr">http://www.maintel.cn</span></div><div class="line"><span class="attr">  GitHub:</span> <span class="attr">http://www.github.com</span></div></pre></td></tr></table></figure>
<p>以上。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇主要记录在使用Hexo部署博客过程主题设置，以及一些技巧等。&lt;/p&gt;
    
    </summary>
    
      <category term="hexo" scheme="https://maintel.github.io/categories/hexo/"/>
    
    
      <category term="Hexo" scheme="https://maintel.github.io/tags/Hexo/"/>
    
  </entry>
  
</feed>
